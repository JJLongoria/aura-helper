{
	"name": "aura-helper",
	"publisher": "Kanko",
	"displayName": "Aura Helper",
	"description": "Extension to work with Salesforce, Apex and Lightning. It contains several tools to increase productivity and facilitate code creation. Aura Helper is the most complete extensions to work with salesforce and is one of the necessary applications for Salaesforce developers.",
	"version": "4.0.0",
	"engines": {
		"vscode": "^1.39.0",
		"node": ">=12.0.0"
	},
	"icon": "./dist/resources/images/blue_icon.png",
	"categories": [
		"Programming Languages",
		"Snippets",
		"Formatters",
		"Other",
		"Linters"
	],
	"keywords": [
		"aura-helper-framework",
		"aura helper framework",
		"Aura Helper Framework",
		"ah-framework",
		"AH Framework",
		"Aura Helper",
		"aura-helper",
		"AuraHelper Library",
		"AuraHelper Libraries",
		"AH",
		"ah",
		"Salesforce",
		"Salesforce Metadata",
		"Salesforce Apps",
		"Salesforce XML",
		"Salesforce Tools",
		"Apex",
		"force.com",
		"DevOps",
		"devops",
		"lightning",
		"documentation",
		"javadoc",
		"apexdoc",
		"aura documentation",
		"auradoc",
		"profile",
		"profile management",
		"salesforce profile",
		"metadata management",
		"local metadata management",
		"graphic interface",
		"compress files",
		"git",
		"version control",
		"code completion",
		"completion",
		"autocomplete",
		"complete code",
		"gui",
		"ui",
		"metadata",
		"local metadata",
		"IntelliSense",
		"Apex IntelliSense",
		"Aura IntelliSense",
		"JavaScript IntelliSense",
		"Salesforce IntelliSense"
	],
	"activationEvents": [
		"workspaceContains:sfdx-project.json",
		"onCommand:aurahelper.completion.js.function",
		"onCommand:aurahelper.completion.documentation.method",
		"onCommand:aurahelper.template.apex.comment",
		"onCommand:aurahelper.template.aura.documentation",
		"onCommand:aurahelper.completion.aura.documentation",
		"onCommand:aurahelper.help",
		"onCommand:aurahelper.file.new.aura",
		"onCommand:aurahelper.metadata.refresh.index",
		"onCommand:aurahelper.metadata.refresh.object",
		"onCommand:aurahelper.metadata.compress.xml",
		"onCommand:aurahelper.metadata.compress.xml.all",
		"onCommand:aurahelper.metadata.permission.editor",
		"onCommand:aurahelper.metadata.retrieve.special",
		"onCommand:aurahelper.metadata.package.generate",
		"onCommand:aurahelper.metadata.org.comparator",
		"onCommand:aurahelper.metadata.customlabels.editor",
		"onCommand:aurahelper.documentation.project.create",
		"onCommand:aurahelper.completion.apex.implement.interface",
		"onCommand:aurahelper.completion.apex.implement.extend"
	],
	"main": "./dist/index.js",
	"types": "./dist/index.d.ts",
	"contributes": {
		"configuration": {
			"title": "Aura Helper",
			"properties": {
				"aurahelper.api.useAuraHelperCLI": {
					"type": "boolean",
					"default": false,
					"description": "Use Aura Helper CLI to execute some processes (Recommended to PCs with low resources). If not selected, all operation will be executed into VSCode context (faster but need more resources)"
				},
				"aurahelper.documentation.useStandardJavaComments": {
					"type": "boolean",
					"default": false,
					"description": "True to use the Standard Java Comments style on Apex, false to use your custom Apex comment template. (Need Reload Window)"
				},
				"aurahelper.intelliSense.enableHoverInformation": {
					"type": "boolean",
					"default": true,
					"description": "True to enable hover information provide by Aura Helper. False to disable it."
				},
				"aurahelper.autoCompletion.activeAttributeSuggest": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Use Code Suggestion and autocompletion tools for component attributes (`v.`)"
				},
				"aurahelper.autoCompletion.activeControllerFunctionsSuggest": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools for JavaScript Controller Functions (`c.`)"
				},
				"aurahelper.autoCompletion.activeHelperFunctionsSuggest": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools for JavaScript Helper Functions (`helper.`)"
				},
				"aurahelper.autoCompletion.activeControllerMethodsSuggest": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools for Apex Controller Methods (`c.`) on javascript files"
				},
				"aurahelper.autoCompletion.activeComponentSuggest": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools for show custom components"
				},
				"aurahelper.autoCompletion.activeComponentCallSuggest": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools for show available attributes for standard components when are called"
				},
				"aurahelper.autoCompletion.activeCustomComponentCallSuggest": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools for show available attributes for custom components when are called"
				},
				"aurahelper.autoCompletion.activeApexCommentSuggestion": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools for create a method or class comment on Apex"
				},
				"aurahelper.autoCompletion.activeSObjectSuggestion": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools for list all Sobjects on your org"
				},
				"aurahelper.autoCompletion.activeSobjectFieldsSuggestion": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools for the fields of an SObject"
				},
				"aurahelper.autoCompletion.activeQuerySuggestion": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools on queries"
				},
				"aurahelper.autoCompletion.activeApexSuggestion": {
					"type": "boolean",
					"default": true,
					"description": "Use Code Suggestion and autocompletion tools for Apex Code (variables, fields, methods...)"
				},
				"aurahelper.metadata.refreshSObjectDefinitionsOnStart": {
					"type": "boolean",
					"default": false,
					"description": "Refresh the Aura Helper's SObject Definitions when VSCode Start. Only will be refresh the not existing definitions. To force update all definitions, execute the command for it"
				},
				"aurahelper.metadata.useCustomAPIVersion": {
					"type": "boolean",
					"default": false,
					"description": "Aura Helper use the SFDX CLI Command Version as Salesforce API Version for download metadata from Org by default. Check this field for use custom API Version"
				},
				"aurahelper.metadata.customAPIVersion": {
					"type": "integer",
					"default": 0,
					"description": "Salesforce API Version for use if you select Use Custom API Version setting.",
					"minimum": 0
				},
				"aurahelper.metadata.groupGlobalQuickActions": {
					"type": "boolean",
					"default": true,
					"description": "True to group Global Quick Actions on GlobalActions group into Quick Action Metadata type when describe Metadata types (from any source). False to add as object and item"
				},
				"aurahelper.metadata.xmlSortOrder": {
					"type": "string",
					"default": "Simple XML Elements First",
					"enum": [
						"Simple XML Elements First",
						"Complex XML Elements First",
						"Alphabet Asc",
						"Alphabet Desc"
					],
					"enumDescriptions": [
						"Reorder the XML elements when simple elements (Strings, Booleans, Dates, Enums... without nested elements) as first elements (also use alphabetical asc order to order the simple and complex types)",
						"Reorder the XML elements when complex elements (Arrays and Objects with nested elements) as first elements (also use alphabetical asc order to order the simple and complex types)",
						"Reorder the XML elements on alphabetical ascending order (a, b, c...)",
						"Reorder the XML elements on alphabetical descending order (z, y, x...)"
					],
					"description": "Sort Order for all XML files when choose compress option or run compress commands"
				},
				"aurahelper.apexFormat.punctuation.maxBlankLines": {
					"type": "integer",
					"default": 2,
					"description": "Number of the maximum blank lines, -1 for keep the code blank lines",
					"minimum": -1
				},
				"aurahelper.apexFormat.punctuation.openCurlyBracketOnNewLine": {
					"type": "boolean",
					"default": false,
					"description": "Add the { symbol on a new line (Not affect to List, Set or Map explicit value declaration)."
				},
				"aurahelper.apexFormat.punctuation.addNewLineAfterCloseCurlyBracket": {
					"type": "boolean",
					"default": false,
					"description": "Add new line after { symbol. Only affects on flow control structures (if, else if, for, foreach, while, do...while, catch)."
				},
				"aurahelper.apexFormat.punctuation.addWhitespaceAfterCloseCurlyBracket": {
					"type": "boolean",
					"default": true,
					"description": "Add white space after { symbol if 'Add New Line After Close Curly Bracket' is set to false"
				},
				"aurahelper.apexFormat.punctuation.addWhitespaceBeforeOpenCurlyBracket": {
					"type": "boolean",
					"default": false,
					"description": "Add a white space before { symbol (Not affect to List, Set or Map explicit value declaration). Only apply if Open Curly Bracket On New Line is set to false"
				},
				"aurahelper.apexFormat.punctuation.addWhitespaceBeforeOpenGuardParenthesis": {
					"type": "boolean",
					"default": true,
					"description": "Add a white space before ( symbol for flow control structures (if, else if, for, foreach, while, do...while, catch)"
				},
				"aurahelper.apexFormat.punctuation.addWhitespaceAfterOpenGuardParenthesis": {
					"type": "boolean",
					"default": false,
					"description": "Add a white space after ( symbol for flow control structures (if, else if, for, foreach, while, do...while, catch)"
				},
				"aurahelper.apexFormat.punctuation.addWhitespaceBeforeCloseGuardParenthesis": {
					"type": "boolean",
					"default": false,
					"description": "Add a white space before ) symbol for flow structures (if, else if, for, foreach, while, do...while, catch)"
				},
				"aurahelper.apexFormat.punctuation.addWhiteSpaceAfterComma": {
					"type": "boolean",
					"default": true,
					"description": "Add a white space after , symbol"
				},
				"aurahelper.apexFormat.punctuation.addWhitespaceBeforeOpenTriggerEvents": {
					"type": "boolean",
					"default": true,
					"description": "Add a white space before ( symbol on trigger events declaration"
				},
				"aurahelper.apexFormat.operator.addWhitespaceBeforeOperator": {
					"type": "boolean",
					"default": true,
					"description": "Add a white space before any arithmetic, logic, assignment or bitwise operators"
				},
				"aurahelper.apexFormat.operator.addWhitespaceAfterOperator": {
					"type": "boolean",
					"default": true,
					"description": "Add a white space after any arithmetic, logic, assignment or bitwise operator"
				},
				"aurahelper.apexFormat.operator.addWhitespaceAfterOpenParenthesisOperator": {
					"type": "boolean",
					"default": false,
					"description": "Add a white space after ( priority operator"
				},
				"aurahelper.apexFormat.operator.addWhitespaceBeforeCloseParenthesisOperator": {
					"type": "boolean",
					"default": false,
					"description": "Add a white space before ) priority operator"
				},
				"aurahelper.apexFormat.classMembers.newLinesBetweenCodeBlockMembers": {
					"type": "integer",
					"default": 1,
					"description": "Add the specified new lines between method, enums, inner classes, properties or other code block declaration on classes and interfaces",
					"minimum": 0
				},
				"aurahelper.apexFormat.classMembers.newLinesBetweenGetterAndSetterAccessor": {
					"type": "integer",
					"default": 1,
					"description": "Add the specified new lines between getter and setter accessor on properties declaration",
					"minimum": 0
				},
				"aurahelper.apexFormat.classMembers.singleLineProperties": {
					"type": "boolean",
					"default": true,
					"description": "Keep property's getter and setter on a single line when getter and setter has no body"
				},
				"aurahelper.apexFormat.classMembers.newLinesBetweenClassFields": {
					"type": "integer",
					"default": 0,
					"description": "Add the specified new lines between class fields or constants",
					"minimum": 0
				},
				"aurahelper.apexFormat.comment.holdBeforeWhitespacesOnLineComment": {
					"type": "boolean",
					"default": true,
					"description": "Keep the before whitespaces when start comments if not are on new line"
				},
				"aurahelper.apexFormat.comment.holdAfterWhitespacesOnLineComment": {
					"type": "boolean",
					"default": true,
					"description": "Keep the after whitespaces when end comments if have any code"
				},
				"aurahelper.apexFormat.comment.newLinesBewteenComments": {
					"type": "integer",
					"default": 0,
					"minimum": 0,
					"description": "New lines between comments when have more than one comment block followed. Only apply if the comments are in different lines previous format"
				},
				"aurahelper.apexFormat.query.oneClausePerLine": {
					"type": "boolean",
					"default": true,
					"description": "Set every query clause on a new line"
				},
				"aurahelper.apexFormat.query.maxProjectionFieldPerLine": {
					"type": "integer",
					"default": 0,
					"minimum": 0,
					"description": "Set the maximum projection fields per line. 0 to put all fields on the same line"
				}
			}
		},
		"commands": [
			{
				"command": "aurahelper.help",
				"title": "AuraHelper: Help"
			},
			{
				"command": "aurahelper.completion.js.function",
				"title": "AuraHelper: Add Javascript Aura Function"
			},
			{
				"command": "aurahelper.completion.documentation.method",
				"title": "AuraHelper: Add Method Block to Aura Documentation"
			},
			{
				"command": "aurahelper.template.apex.comment",
				"title": "AuraHelper: Edit Apex Comment Template"
			},
			{
				"command": "aurahelper.template.aura.documentation",
				"title": "AuraHelper: Edit Aura Documentation Template"
			},
			{
				"command": "aurahelper.completion.aura.documentation",
				"title": "AuraHelper: Generate Aura Documentation"
			},
			{
				"command": "aurahelper.help",
				"title": "AuraHelper: Help"
			},
			{
				"command": "aurahelper.file.new.aura",
				"title": "AuraHelper: New Aura File"
			},
			{
				"command": "aurahelper.metadata.refresh.index",
				"title": "AuraHelper: Refresh All SObjects Definitions"
			},
			{
				"command": "aurahelper.metadata.refresh.object",
				"title": "AuraHelper: Refresh SObject Definition"
			},
			{
				"command": "aurahelper.metadata.compress.xml",
				"title": "AuraHelper: Compress XML File"
			},
			{
				"command": "aurahelper.metadata.compress.xml.all",
				"title": "AuraHelper: Compress ALL XML Files"
			},
			{
				"command": "aurahelper.metadata.permission.editor",
				"title": "AuraHelper: Permission Editor"
			},
			{
				"command": "aurahelper.metadata.retrieve.special",
				"title": "AuraHelper: Retrieve Special Types"
			},
			{
				"command": "aurahelper.metadata.package.generate",
				"title": "AuraHelper: Package Generator"
			},
			{
				"command": "aurahelper.metadata.org.comparator",
				"title": "AuraHelper: Metadata Comparator"
			},
			{
				"command": "aurahelper.metadata.customlabels.editor",
				"title": "AuraHelper: Custom Labels Editor"
			},
			{
				"command": "aurahelper.metadata.project.repair",
				"title": "AuraHelper: Repair Project Dependencies"
			},
			{
				"command": "aurahelper.documentation.project.create",
				"title": "AuraHelper: Create Project Documentation"
			},
			{
				"command": "aurahelper.completion.apex.implement.interface",
				"title": "AuraHelper: Implement Interfaces"
			},
			{
				"command": "aurahelper.completion.apex.implement.extend",
				"title": "AuraHelper: Implement Extended Methods"
			},
			{
				"command": "aurahelper.output.problems.clear",
				"title": "AuraHelper: Clear Problems Panel"
			},
			{
				"command": "aurahelper.metadata.ignore",
				"title": "AuraHelper: Ignore Metadata from Project"
			},
			{
				"command": "aurahelper.metadata.permission.modify",
				"title": "AuraHelper: Modify Permissions"
			}
		],
		"languages": [
			{
				"id": "apex",
				"extensions": [
					".apex",
					".cls",
					".trigger"
				],
				"aliases": [
					"Apex"
				]
			},
			{
				"id": "apex-anon",
				"extensions": [
					".apex"
				],
				"aliases": [
					"Apex Anonymous"
				]
			},
			{
				"id": "html",
				"extensions": [
					".auradoc",
					".cmp",
					".evt",
					".app"
				],
				"aliases": [
					"HTML"
				]
			},
			{
				"id": "javascript",
				"extensions": [
					".js"
				],
				"aliases": [
					"JavaScript"
				]
			}
		],
		"menus": {
			"explorer/context": [
				{
					"when": "resourceExtname == .cmp",
					"command": "aurahelper.file.new.aura",
					"group": "auraHelper@1"
				},
				{
					"when": "resource =~ /./aura/ && resourceExtname =~ /^(?!(.app|.cmp|.auradoc|.evt|.intf|.css|.design|.html|.js|.svg)$)/",
					"command": "aurahelper.file.new.aura",
					"group": "auraHelper@1"
				},
				{
					"when": "resourceExtname == .auradoc",
					"command": "aurahelper.completion.aura.documentation",
					"group": "auraHelper@1"
				},
				{
					"when": "resource =~ /./force-app/ && resourceExtname == ''",
					"command": "aurahelper.metadata.compress.xml.all",
					"group": "auraHelper@1"
				},
				{
					"when": "resource =~ /./force-app/ && resourceExtname == .xml",
					"command": "aurahelper.metadata.compress.xml",
					"group": "auraHelper@1"
				},
				{
					"when": "resource =~ /.+\\.profile-meta.xml/ || resource =~ /.+\\.permissionset-meta.xml/",
					"command": "aurahelper.metadata.permission.editor",
					"group": "auraHelper@1"
				},
				{
					"when": "resource =~ /.+\\.labels-meta.xml/",
					"command": "aurahelper.metadata.customlabels.editor",
					"group": "auraHelper@1"
				},
				{
					"when": "resourceExtname == .cls || resource =~ /.+\\.app-meta.xml/ || resource =~ /.+\\.md-meta.xml/ || resource =~ /.+\\.customPermission-meta.xml/ || resource =~ /.+\\.object-meta.xml/ || resource =~ /.+\\.dataSource-meta.xml/ || resource =~ /.+\\.field-meta.xml/ || resource =~ /.+\\.page/ || resource =~ /.+\\.recordType-meta.xml/ || resource =~ /.+\\.tab-meta.xml/ || resource =~ /.+\\.layout-meta.xml/",
					"command": "aurahelper.metadata.permission.modify",
					"group": "auraHelper@1"
				}
			],
			"editor/context": [
				{
					"when": "resourceExtname == .cmp",
					"command": "aurahelper.file.new.aura",
					"group": "auraHelper@1"
				},
				{
					"when": "resourceExtname == .auradoc",
					"command": "aurahelper.completion.aura.documentation",
					"group": "auraHelper@1"
				},
				{
					"when": "resource =~ /./force-app/ && resourceExtname == .xml",
					"command": "aurahelper.metadata.compress.xml",
					"group": "auraHelper@1"
				},
				{
					"when": "resource =~ /.+\\.profile-meta.xml/ || resource =~ /.+\\.permissionset-meta.xml/",
					"command": "aurahelper.metadata.permission.editor",
					"group": "auraHelper@1"
				},
				{
					"when": "resource =~ /.+\\.labels-meta.xml/",
					"command": "aurahelper.metadata.customlabels.editor",
					"group": "auraHelper@1"
				},
				{
					"when": "resourceExtname == .cls || resource =~ /.+\\.app-meta.xml/ || resource =~ /.+\\.md-meta.xml/ || resource =~ /.+\\.customPermission-meta.xml/ || resource =~ /.+\\.object-meta.xml/ || resource =~ /.+\\.dataSource-meta.xml/ || resource =~ /.+\\.field-meta.xml/ || resource =~ /.+\\.page/ || resource =~ /.+\\.recordType-meta.xml/ || resource =~ /.+\\.tab-meta.xml/ || resource =~ /.+\\.layout-meta.xml/",
					"command": "aurahelper.metadata.permission.modify",
					"group": "auraHelper@1"
				},
				{
					"when": "resourceExtname == .cls",
					"command": "aurahelper.completion.apex.implement.interface",
					"group": "auraHelper@1"
				},
				{
					"when": "resourceExtname == .cls",
					"command": "aurahelper.completion.apex.implement.extend",
					"group": "auraHelper@1"
				}
			]
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./ && npm run esbuild",
		"lint": "eslint src --ext ts",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"test": "node ./dist/test/runTest.js",
		"esbuild-base": "esbuild ./src/index.ts --bundle --outfile=dist/index.js --external:vscode --format=cjs --platform=node",
		"esbuild": "npm run esbuild-base -- --sourcemap",
		"esbuild-watch": "npm run esbuild-base -- --sourcemap --watch"
	},
	"license": "GPLv3",
	"repository": {
		"type": "git",
		"url": "https://github.com/JJLongoria/aura-helper"
	},
	"bugs": {
		"url": "https://github.com/JJLongoria/aura-helper/issues",
		"email": "juanjoselongoria@gmail.com"
	},
	"dependencies": {
		"@aurahelper/cli-manager": "^1.0.2",
		"@aurahelper/connector": "^1.1.2",
		"@aurahelper/core": "^1.0.13",
		"@aurahelper/dependencies-manager": "^1.0.0",
		"@aurahelper/git-manager": "^1.0.0",
		"@aurahelper/ignore": "^1.0.1",
		"@aurahelper/languages": "^1.0.13",
		"@aurahelper/metadata-factory": "^1.0.10",
		"@aurahelper/package-generator": "^1.0.2",
		"@aurahelper/xml-compressor": "^1.0.0",
		"@aurahelper/xml-definitions": "^1.0.0"
	},
	"devDependencies": {
		"@types/glob": "^7.1.2",
		"@types/mocha": "^5.2.6",
		"@types/node": "^12.12.47",
		"@types/vscode": "^1.46.0",
		"@typescript-eslint/eslint-plugin": "^5.4.0",
		"@typescript-eslint/parser": "^5.4.0",
		"esbuild": "^0.13.15",
		"eslint": "^8.3.0",
		"glob": "^7.1.6",
		"mocha": "^9.1.2",
		"typescript": "^3.9.6",
		"vscode-test": "^1.4.0"
	},
	"extensionDependencies": [
		"salesforce.salesforcedx-vscode"
	]
}
