{
  "name": "AuthConfiguration",
  "namespace": "Auth",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [
    {
      "name": "AuthConfiguration",
      "signature": "public AuthConfiguration(String communityOrCustomUrl, String startUrl)",
      "description": "Creates an instance of the AuthConfiguration class using the specified URL for a community or a My Domain subdomain and the start URL for authenticated users.",
      "params": [
        {
          "name": "startUrl",
          "datatype": "String",
          "description": "The URL for the domain, which can be a Salesforce subdomain created with My Domain (my.salesforce.com) or a subdomain of a community (force.com). The page users see after successfully logging in to the community or My Domain subdomain."
        }
      ],
      "datatype": "void"
    },
    {
      "name": "AuthConfiguration",
      "signature": "public AuthConfiguration(Id networkId, String startUrl)",
      "description": "Creates an instance of the AuthConfiguration class using the specified community ID and authenticated-user starting URL.",
      "params": [
        {
          "name": "startUrl",
          "datatype": "String",
          "description": "The ID of the community. The page users see after successfully logging in to the community."
        }
      ],
      "datatype": "void"
    }
  ],
  "methods": [
    {
      "name": "getAllowInternalUserLoginEnabled",
      "signature": "public Boolean getAllowInternalUserLoginEnabled()",
      "description": "Indicates whether the community allows internal users to log in using the community login page. To enable, admins configure the setting Allow internal users to log in directly to the community on the Login &amp; Registration page in Community Workspaces. Itâ€™s disabled by default.",
      "params": [],
      "datatype": "void"
    },
    {
      "name": "getAuthConfig",
      "signature": "public AuthConfig getAuthConfig()",
      "description": "Returns the AuthConfig sObject, which represents the authentication options for a community or Salesforce My Domain subdomain.",
      "params": [],
      "datatype": "AuthConfig"
    },
    {
      "name": "getAuthConfigProviders",
      "signature": "public List<AuthConfigProviders> getAuthConfigProviders()",
      "description": "Returns the list of authentication providers configured for a community or Salesforce My Domain subdomain.",
      "params": [],
      "datatype": "List<AuthConfigProviders>"
    },
    {
      "name": "getAuthProviders",
      "signature": "public List<AuthProvider> getAuthProviders()",
      "description": "Returns the list of authentication providers available for a community or Salesforce My Domain subdomain.",
      "params": [],
      "datatype": "List<AuthProvider>"
    },
    {
      "name": "getAuthProviderSsoUrl",
      "signature": "public static String getAuthProviderSsoUrl(String communityUrl, String startUrl, String developerName)",
      "description": "Returns the single sign-on URL for a community or Salesforce My Domain subdomain.",
      "params": [
        {
          "name": "developerName",
          "datatype": "String",
          "description": "The URL for the community or My Domain subdomain. If not null and not specified as an empty string, you get the URL for a community. If null or specified as an empty string, you get the URL for a custom domain. The page that users see after logging in to the community or My Domain subdomain. The unique name of the authentication provider."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getBackgroundColor",
      "signature": "public String getBackgroundColor()",
      "description": "Returns the color for the background of the login page for a community.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getCertificateLoginEnabled",
      "signature": "public Boolean getCertificateLoginEnabled(String domainUrl)",
      "description": "Returns true if certificate-based authentication is enabled for the My Domain URL.",
      "params": [
        {
          "name": "domainUrl",
          "datatype": "String",
          "description": "The My Domain URL that is being checked for certificate-based authentication."
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "getCertificateLoginUrl",
      "signature": "public static String getCertificateLoginUrl(String domainUrl, String startUrl)",
      "description": "Returns the certificate-based authentication endpoint for the My Domain URL if the org has certificate-based authentication enabled.",
      "params": [
        {
          "name": "startUrl",
          "datatype": "String",
          "description": "The My Domain URL being checked for its certificate-based authentication endpoint . The page that the user is directed to after logging in to the My Domain with certificate-based authentication."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getDefaultProfileForRegistration",
      "signature": "public String getDefaultProfileForRegistration()",
      "description": "Returns the profile ID assigned to new community users.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getFooterText",
      "signature": "public String getFooterText()",
      "description": "Returns the text at the bottom of the login page for a community.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getForgotPasswordUrl",
      "signature": "public String getForgotPasswordUrl()",
      "description": "Returns the URL for the standard or custom Forgot Password page that is specified for a community or portal by the administrator.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getLogoUrl",
      "signature": "public String getLogoUrl()",
      "description": "Returns the location of the icon image at the bottom of the login page for a community.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getRightFrameUrl",
      "signature": "public String getLoginRightFrameUrl()",
      "description": "Returns the URL for the right-frame content to display on the right side of the community login page. The admin supplies the URL.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getSamlProviders",
      "signature": "public List<SamlSsoConfig> getSamlProviders()",
      "description": "Returns the list of SAML-based authentication providers available for a community or Salesforce My Domain subdomain.",
      "params": [],
      "datatype": "List<SamlSsoConfig>"
    },
    {
      "name": "getSamlSsoUrl",
      "signature": "public static String getSamlSsoUrl(String communityUrl, String startURL, String samlId)",
      "description": "Returns the single sign-on URL for a community or Salesforce My Domain subdomain.",
      "params": [
        {
          "name": "samlId",
          "datatype": "String",
          "description": "The URL for the community or My Domain subdomain. If not null and not specified as an empty string, you get the URL for a community. If null or specified as an empty string, you get the URL for a My Domain subdomain. The page users see after successfully logging in to the community or My Domain subdomain The unique identifier of the SamlSsoConfig standard object for the community or My Domain subdomain"
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getSelfRegistrationEnabled",
      "signature": "public Boolean getSelfRegistrationEnabled()",
      "description": "Indicates whether the current community allows new users to create their own account by filling out a registration form.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "getSelfRegistrationUrl",
      "signature": "public String getSelfRegistrationUrl()",
      "description": "Returns the location of the self-registration page for new users to sign up for an account with a community.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getStartUrl",
      "signature": "public String getStartUrl()",
      "description": "Returns the start page of a community or Salesforce My Domain subdomain. This URL is the first page that users see when they log in.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getUsernamePasswordEnabled",
      "signature": "public Boolean getUsernamePasswordEnabled()",
      "description": "Indicates whether the current community is set to display a login form asking for a username and password. You can configure the community not to request a username and password if it is for unauthenticated users or users logging in with a third-party authentication provider.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isCommunityUsingSiteAsContainer",
      "signature": "public Boolean isCommunityUsingSiteAsContainer()",
      "description": "Returns true if the community uses Site.com pages; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    }
  ],
  "description": "Contains methods for configuring settings for users to log in to a Salesforce org using their authentication provider credentials instead of their Salesforce credentials. The authentication provider can be any authentication provider that supports the OpenID Connect protocol, such as Google, Facebook, or Twitter. Users log in to either a community subdomain of the force.com domain (https://subdomain.force.com) or a Salesforce subdomain created with My Domain (https://subdomain.my.salesforce.com).",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_AuthConfiguration.htm"
}