{
  "AuthConfiguration": {
    "name": "AuthConfiguration",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Contains methods for configuring settings for users to log in to a Salesforce org using their authentication provider credentials instead of their Salesforce credentials. The authentication provider can be any authentication provider that supports the OpenID Connect protocol, such as Google, Facebook, or Twitter. Users log in to either a community subdomain of the force.com domain (https://subdomain.force.com) or a Salesforce subdomain created with My Domain (https://subdomain.my.salesforce.com).",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_AuthConfiguration.htm",
    "classes": [],
    "enums": []
  },
  "AuthProviderCallbackState": {
    "name": "AuthProviderCallbackState",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Provides request HTTP headers, body, and query parameters to the AuthProviderPlugin.handleCallback method for user authentication. This class allows you to group the information passed in rather than passing headers, body, and query parameters individually.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_AuthProviderCallbackState.htm",
    "classes": [],
    "enums": []
  },
  "AuthProviderPlugin": {
    "name": "AuthProviderPlugin",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": true,
    "enumValues": [],
    "description": "This interface is deprecated. For new development, use the abstract class Auth.AuthProviderPluginClass to create a custom OAuth-based authentication provider plug-in for single sign-on in to Salesforce.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_interface_Auth_AuthProviderPlugin.htm",
    "classes": [],
    "enums": []
  },
  "AuthProviderPluginClass": {
    "name": "AuthProviderPluginClass",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Contains methods to create a custom OAuth-based authentication provider plug-in for single sign-on in to Salesforce. Use this class to create a custom authentication provider plug-in if you can’t use one of the authentication providers that Salesforce provides.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_AuthProviderPluginClass.htm",
    "classes": [],
    "enums": []
  },
  "AuthProviderTokenResponse": {
    "name": "AuthProviderTokenResponse",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Stores the response from the AuthProviderPlugin.handleCallback method.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_AuthProviderTokenResponse.htm",
    "classes": [],
    "enums": []
  },
  "AuthToken": {
    "name": "AuthToken",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Contains methods for providing the access token associated with an authentication provider for an authenticated user, except for the Janrain provider.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_AuthToken.htm",
    "classes": [],
    "enums": []
  },
  "CommunitiesUtil": {
    "name": "CommunitiesUtil",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Contains methods for getting information about a community user.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_CommunitiesUtil.htm",
    "classes": [],
    "enums": []
  },
  "ConfigurableSelfRegHandler": {
    "name": "ConfigurableSelfRegHandler",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": true,
    "enumValues": [],
    "description": "Gives you more control over how visitors self-register for your community by creating a class that implements Auth.ConfigurableSelfRegHandler. You choose the user information to collect, and how users identify themselves—with their email address, phone number, or another identifier. Once verified, you create a new external user and log the user in to your community.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_interface_Auth_ConfigurableSelfRegHandler.htm",
    "classes": [],
    "enums": []
  },
  "ConnectedAppPlugin": {
    "name": "ConnectedAppPlugin",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Contains methods for extending the behavior of a connected app, for example, customizing how a connected app is invoked depending on the protocol used. This class gives you more control over the interaction between Salesforce and your connected app.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_ConnectedAppPlugin.htm",
    "classes": [],
    "enums": []
  },
  "InvocationContext": {
    "name": "InvocationContext",
    "namespace": "Auth",
    "isEnum": true,
    "isInterface": false,
    "enumValues": [
      "ASSET_TOKEN",
      "OAUTH1",
      "OAUTH2_JWT_BEARER_TOKEN",
      "OAUTH2_SAML_ASSERTION",
      "OAUTH2_SAML_BEARER_ASSERTION",
      "OAUTH2_USERNAME_PASSWORD",
      "OAUTH2_USER_AGENT_ID_TOKEN",
      "OAUTH2_USER_AGENT_TOKEN",
      "OAUTH2_WEB_SERVER",
      "OPENIDCONNECT",
      "REFRESH_TOKEN",
      "SAML_ASSERTION",
      "UNKNOWN",
      "USERID_ENDPOINT"
    ],
    "description": "The context in which the connected app is invoked, such as the protocol flow used and the token type issued, if any. Developers can use the context information to write code that is unique to the type of invocation.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_enum_Auth_InvocationContext.htm",
    "classes": [],
    "enums": []
  },
  "JWS": {
    "name": "JWS",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Contains methods that apply a digital signature to a JSON Web Token (JWT), using a JSON Web Signature (JWS) data structure. This class creates the signed JWT bearer token, which can be used to request an OAuth access token in the OAuth 2.0 JWT bearer token flow.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_JWS.htm",
    "classes": [],
    "enums": []
  },
  "JWT": {
    "name": "JWT",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Generates the JSON Claims Set in a JSON Web Token (JWT). The resulting Base64-encoded payload can be passed as an argument to create an instance of the Auth.JWS class.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_JWT.htm",
    "classes": [],
    "enums": []
  },
  "JWTBearerTokenExchange": {
    "name": "JWTBearerTokenExchange",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Contains methods that POST the signed JWT bearer token to a token endpoint to request an access token, in the OAuth 2.0 JWT bearer token flow.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_JWTBearerTokenExchange.htm",
    "classes": [],
    "enums": []
  },
  "LightningLoginEligibility": {
    "name": "LightningLoginEligibility",
    "namespace": "Auth",
    "isEnum": true,
    "isInterface": false,
    "enumValues": [
      "ELIGIBLE",
      "ORG_AUTHENTICATOR_NOT_ENABLED",
      "ORG_PREF_NOT_ENABLED",
      "USER_AUTHENTICATOR_NOT_CONNECTED",
      "USER_NOT_ALLOWED",
      "USER_NOT_ENROLLED",
      "USER_PERM_NOT_ENABLED"
    ],
    "description": "Contains a Lightning Login eligibility value used by the Auth.SessionManagement.getLightningLoginEligibility method.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_enum_Auth_LightningLoginEligibility.htm",
    "classes": [],
    "enums": []
  },
  "LoginDiscoveryHandler": {
    "name": "LoginDiscoveryHandler",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": true,
    "enumValues": [],
    "description": "Salesforce gives you the ability to log in users based on other verification methods than username and password. For example, it can prompt users to log in with their email, phone number, or another identifier like a Federation ID or device identifier. Login Discovery is available to all external user licenses, including Customer Community, Customer Community Plus, External Identity, Partner Community, and Partner Community Plus.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_interface_Auth_LoginDiscoveryHandler.htm",
    "classes": [],
    "enums": []
  },
  "LoginDiscoveryMethod": {
    "name": "LoginDiscoveryMethod",
    "namespace": "Auth",
    "isEnum": true,
    "isInterface": false,
    "enumValues": [
      "LIGHTNING_LOGIN",
      "PASSWORD"
    ],
    "description": "Contains methods used to verify the user’s identity when the My Domain login process uses Login Discovery.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_enum_Auth_LoginDiscoveryMethod.htm",
    "classes": [],
    "enums": []
  },
  "MyDomainLoginDiscoveryHandler": {
    "name": "MyDomainLoginDiscoveryHandler",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "The handler used to implement the My Domain Login Discovery page, which is an interview-based (two-step) login process. First the user is prompted for a unique identifier such as an email address or phone number. Then the handler determines (discovers) how to authenticate the user. Either the user enters a password or is directed to an identity provider’s login page.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_interface_Auth_MyDomainLoginDiscoveryHandler.htm",
    "classes": [],
    "enums": []
  },
  "OAuthRefreshResult": {
    "name": "OAuthRefreshResult",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Stores the result of an AuthProviderPluginClass refresh method. OAuth authentication flow provides a refresh token that can be used to get a new access token. Access tokens have a limited lifetime as specified by the session timeout value. When an access token expires, use a refresh token to get a new access token.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_OAuthRefreshResult.htm",
    "classes": [],
    "enums": []
  },
  "RegistrationHandler": {
    "name": "RegistrationHandler",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": true,
    "enumValues": [],
    "description": "Salesforce provides the ability to use an authentication provider, such as Facebook© or Janrain©, for single sign-on into Salesforce.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_auth_plugin.htm",
    "classes": [],
    "enums": []
  },
  "SamlJitHandler": {
    "name": "SamlJitHandler",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": true,
    "enumValues": [],
    "description": "Use this interface to control and customize Just-in-Time user provisioning logic during SAML single sign-on.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_interface_Auth_SamlJitHandler.htm",
    "classes": [],
    "enums": []
  },
  "SessionLevel": {
    "name": "SessionLevel",
    "namespace": "Auth",
    "isEnum": true,
    "isInterface": false,
    "enumValues": [
      "LOW",
      "STANDARD",
      "HIGH_ASSURANCE"
    ],
    "description": "An Auth.SessionLevel enum value is used by the  SessionManagement.setSessionLevel method.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_enum_Auth_SessionLevel.htm",
    "classes": [],
    "enums": []
  },
  "SessionManagement": {
    "name": "SessionManagement",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Contains methods for verifying users’ identity, creating custom login flows, customizing security levels, and defining trusted IP ranges for a current session.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_SessionManagement.htm",
    "classes": [],
    "enums": []
  },
  "UserData": {
    "name": "UserData",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Stores user information for Auth.RegistrationHandler.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_UserData.htm",
    "classes": [],
    "enums": []
  },
  "VerificationMethod": {
    "name": "VerificationMethod",
    "namespace": "Auth",
    "isEnum": true,
    "isInterface": false,
    "enumValues": [
      "EMAIL",
      "PASSWORD",
      "SALESFORCE_AUTHENTICATOR",
      "SMS",
      "TOTP",
      "U2F"
    ],
    "description": "Contains the different ways users can identify themselves when logging in. You can use it to implement mobile-centric passwordless login pages and to self-register (and deregister) verification methods.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_enum_Auth_VerificationMethod.htm",
    "classes": [],
    "enums": []
  },
  "VerificationPolicy": {
    "name": "VerificationPolicy",
    "namespace": "Auth",
    "isEnum": true,
    "isInterface": false,
    "enumValues": [
      "HIGH_ASSURANCE"
    ],
    "description": "The Auth.VerificationPolicy enum contains an identity verification policy value used by the SessionManagement.generateVerificationUrl method.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_enum_Auth_VerificationPolicy.htm",
    "classes": [],
    "enums": []
  },
  "VerificationResult": {
    "name": "VerificationResult",
    "namespace": "Auth",
    "isEnum": false,
    "isInterface": false,
    "enumValues": [],
    "description": "Contains the result of a verification challenge that you invoke when you create your own Verify page. The challenge can be initiated by either the System.UserManagement.verifyPasswordlessLogin or System.UserManagement.verifySelfRegistration method.",
    "link": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_VerificationResult.htm",
    "classes": [],
    "enums": []
  }
}