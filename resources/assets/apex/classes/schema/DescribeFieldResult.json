{
  "name": "DescribeFieldResult",
  "namespace": "Schema",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "getByteLength",
      "signature": "public Integer getByteLength()",
      "description": "For variable-length fields (including binary fields), returns the maximum size of the field, in bytes.",
      "params": [],
      "datatype": "Integer"
    },
    {
      "name": "getCalculatedFormula",
      "signature": "public String getCalculatedFormula()",
      "description": "Returns the formula specified for this field.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getController",
      "signature": "public Schema.sObjectField getController()",
      "description": "Returns the token of the controlling field.",
      "params": [],
      "datatype": "Schema.SObjectField"
    },
    {
      "name": "getDefaultValue",
      "signature": "public Object getDefaultValue()",
      "description": "Returns the default value for this field.",
      "params": [],
      "datatype": "Object"
    },
    {
      "name": "getDefaultValueFormula",
      "signature": "public String getDefaultValueFormula()",
      "description": "Returns the default value specified for this field if a formula is not used.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getDigits",
      "signature": "public Integer getDigits()",
      "description": "Returns the maximum number of digits specified for the field. This method is only valid with Integer fields.",
      "params": [],
      "datatype": "Integer"
    },
    {
      "name": "getInlineHelpText",
      "signature": "public String getInlineHelpText()",
      "description": "Returns the content of the field-level help.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getLabel",
      "signature": "public String getLabel()",
      "description": "Returns the text label that is displayed next to the field in the Salesforce user interface. This label can be localized.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getLength",
      "signature": "public Integer getLength()",
      "description": "Returns the maximum size of the field for the DescribeFieldResult object in Unicode characters (not bytes).",
      "params": [],
      "datatype": "Integer"
    },
    {
      "name": "getLocalName",
      "signature": "public String getLocalName()",
      "description": "Returns the name of the field, similar to the getName method. However, if the field is part of the current namespace, the namespace portion of the name is omitted.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getName",
      "signature": "public String getName()",
      "description": "Returns the field name used in Apex.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getPicklistValues",
      "signature": "public List<Schema.PicklistEntry> getPicklistValues()",
      "description": "Returns a list of PicklistEntry objects. A runtime error is returned if the field is not a picklist.",
      "params": [],
      "datatype": "List<Schema.PicklistEntry>"
    },
    {
      "name": "getPrecision",
      "signature": "public Integer getPrecision()",
      "description": "For fields of type Double, returns the maximum number of digits that can be stored, including all numbers to the left and to the right of the decimal point (but excluding the decimal point character).",
      "params": [],
      "datatype": "Integer"
    },
    {
      "name": "getReferenceTargetField",
      "signature": "public String getReferenceTargetField()",
      "description": "Returns the name of the custom field on the parent standard or custom object whose values are matched against the values of the child external object's indirect lookup relationship field. The match is done to determine which records are related to each other.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getReferenceTo",
      "signature": "public List <Schema.sObjectType> getReferenceTo()",
      "description": "Returns a list of Schema.sObjectType objects for the parent objects of this field. If the isNamePointing method returns true, there is more than one entry in the list, otherwise there is only one.",
      "params": [],
      "datatype": "List<Schema.sObjectType>"
    },
    {
      "name": "getRelationshipName",
      "signature": "public String getRelationshipName()",
      "description": "Returns the name of the relationship.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getRelationshipOrder",
      "signature": "public Integer getRelationshipOrder()",
      "description": "Returns 1 if the field is a child, 0 otherwise.",
      "params": [],
      "datatype": "Integer"
    },
    {
      "name": "getScale",
      "signature": "public Integer getScale()",
      "description": "For fields of type Double, returns the number of digits to the right of the decimal point. Any extra digits to the right of the decimal point are truncated.",
      "params": [],
      "datatype": "Integer"
    },
    {
      "name": "getSOAPType",
      "signature": "public Schema.SOAPType getSOAPType()",
      "description": "Returns one of the SoapType enum values, depending on the type of field.",
      "params": [],
      "datatype": "Schema.SOAPType"
    },
    {
      "name": "getSObjectField",
      "signature": "public Schema.sObjectField getSObjectField()",
      "description": "Returns the token for this field.",
      "params": [],
      "datatype": "Schema.SObjectField"
    },
    {
      "name": "getType",
      "signature": "public Schema.DisplayType getType()",
      "description": "Returns one of the DisplayType enum values, depending on the type of field.",
      "params": [],
      "datatype": "Schema.DisplayType"
    },
    {
      "name": "isAccessible",
      "signature": "public Boolean isAccessible()",
      "description": "Returns true if the current user can see this field, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isAiPredictionField",
      "signature": "public Boolean isAiPredictionField()",
      "description": "Returns true if the current field is enabled to display Einstein prediction data, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isAutoNumber",
      "signature": "public Boolean isAutoNumber()",
      "description": "Returns true if the field is an Auto Number field, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isCalculated",
      "signature": "public Boolean isCalculated()",
      "description": "Returns true if the field is a custom formula field, false otherwise. Note that custom formula fields are always read-only.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isCascadeDelete",
      "signature": "public Boolean isCascadeDelete()",
      "description": "Returns true if the child object is deleted when the parent object is deleted, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isCaseSensitive",
      "signature": "public Boolean isCaseSensitive()",
      "description": "Returns true if the field is case sensitive, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isCreateable",
      "signature": "public Boolean isCreateable()",
      "description": "Returns true if the field can be created by the current user, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isCustom",
      "signature": "public Boolean isCustom()",
      "description": "Returns true if the field is a custom field, false if it is a standard field, such as Name.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isDefaultedOnCreate",
      "signature": "public Boolean isDefaultedOnCreate()",
      "description": "Returns true if the field receives a default value when created, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isDependentPicklist",
      "signature": "public Boolean isDependentPicklist()",
      "description": "Returns true if the picklist is a dependent picklist, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isDeprecatedAndHidden",
      "signature": "public Boolean isDeprecatedAndHidden()",
      "description": "Reserved for future use.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isExternalID",
      "signature": "public Boolean isExternalID()",
      "description": "Returns true if the field is used as an external ID, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isFilterable",
      "signature": "public Boolean isFilterable()",
      "description": "Returns true if the field can be used as part of the filter criteria of a WHERE statement, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isFormulaTreatNullNumberAsZero",
      "signature": "public Boolean isFormulaTreatNullNumberAsZero()",
      "description": "Returns true if null is treated as zero in a formula field, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isGroupable",
      "signature": "public Boolean isGroupable()",
      "description": "Returns true if the field can be included in the GROUP BY clause of a SOQL query, false otherwise. This method is only available for Apex classes and triggers saved using API version 18.0 and higher.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isHtmlFormatted",
      "signature": "public Boolean isHtmlFormatted()",
      "description": "Returns true if the field has been formatted for HTML and should be encoded for display in HTML, false otherwise. One example of a field that returns true for this method is a hyperlink custom formula field. Another example is a custom formula field that has an IMAGE text function.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isIdLookup",
      "signature": "public Boolean isIdLookup()",
      "description": "Returns true if the field can be used to specify a record in an upsert method, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isNameField",
      "signature": "public Boolean isNameField()",
      "description": "Returns true if the field is a name field, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isNamePointing",
      "signature": "public Boolean isNamePointing()",
      "description": "Returns true if the field can have multiple types of objects as parents. For example, a task can have both the Contact/Lead ID (WhoId) field and the Opportunity/Account ID (WhatId) field return true for this method. because either of those objects can be the parent of a particular task record. This method returns false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isNillable",
      "signature": "public Boolean isNillable()",
      "description": "Returns true if the field is nillable, false otherwise. A nillable field can have empty content. A non-nillable field must have a value for the object to be created or saved.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isPermissionable",
      "signature": "public Boolean isPermissionable()",
      "description": "Returns true if field permissions can be specified for the field, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isRestrictedDelete",
      "signature": "public Boolean isRestrictedDelete()",
      "description": "Returns true if the parent object can't be deleted because it is referenced by a child object, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isRestrictedPicklist",
      "signature": "public Boolean isRestrictedPicklist()",
      "description": "Returns true if the field is a restricted picklist, false otherwise",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isSearchPrefilterable",
      "signature": "public Boolean isSearchPrefilterable()",
      "description": "Returns true if a foreign key can be included in prefiltering when used in a SOSL WHERE clause, false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isSortable",
      "signature": "public Boolean isSortable()",
      "description": "Returns true if a query can sort on the field, false otherwise",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isUnique",
      "signature": "public Boolean isUnique()",
      "description": "Returns true if the value for the field must be unique, false otherwise",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isUpdateable",
      "signature": "public Boolean isUpdateable()",
      "description": "Returns true if the field can be edited by the current user, or child records in a master-detail relationship field on a custom object can be reparented to different parent records; false otherwise.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isWriteRequiresMasterRead",
      "signature": "public Boolean isWriteRequiresMasterRead()",
      "description": "Returns true if writing to the detail object requires read sharing instead of read/write sharing of the parent.",
      "params": [],
      "datatype": "Boolean"
    }
  ],
  "description": "Contains methods for describing sObject fields.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_fields_describe.htm"
}