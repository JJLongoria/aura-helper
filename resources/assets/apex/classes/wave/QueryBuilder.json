{
  "name": "QueryBuilder",
  "namespace": "Wave",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "load",
      "signature": "public static wave.QueryNode load(String datasetID, String datasetVersionID)",
      "description": "Load a stream from a dataset.",
      "params": [
        {
          "name": "datasetVersionID",
          "datatype": "String",
          "description": "The ID of the dataset. The ID identifying the version of the dataset."
        }
      ],
      "datatype": "wave.QueryNode"
    },
    {
      "name": "count",
      "signature": "public static wave.ProjectionNode count()",
      "description": "Calculate the number of rows that match the query criteria.",
      "params": [],
      "datatype": "wave.ProjectionNode"
    },
    {
      "name": "get",
      "signature": "public static wave.ProjectionNode get(String proj)",
      "description": "Query by selecting specific attributes.",
      "params": [
        {
          "name": "proj",
          "datatype": "String",
          "description": "The name of the column to query."
        }
      ],
      "datatype": "wave.ProjectionNode"
    },
    {
      "name": "union",
      "signature": "global static Wave.QueryNode union(List<Wave.QueryNode> unionNodes)",
      "description": "Combine multiple result sets into one result set.",
      "params": [
        {
          "name": "unionNodes",
          "datatype": "List<wave.QueryNode>",
          "description": "List of nodes to combine."
        }
      ],
      "datatype": "wave.QueryNode"
    },
    {
      "name": "cogroup",
      "signature": "global static Wave.QueryNode cogroup(List<Wave.QueryNode> cogroupNodes, List<List<String>> groups)",
      "description": "Cogrouping means that two input streams are grouped independently and arranged side by side. Only data that exists in both groups appears in the results.",
      "params": [
        {
          "name": "groups",
          "datatype": "String",
          "description": "List of nodes to group. The type of grouping."
        }
      ],
      "datatype": "wave.QueryNode"
    }
  ],
  "description": "The QueryBuilder class provides methods for constructing well-formed SAQL queries to pass to Wave Analytics.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_wave_QueryBuilder.htm"
}