{
  "name": "QueryNode",
  "namespace": "Wave",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "build",
      "signature": "public String build(String streamName)",
      "description": "Build the query string represented by this QueryNode and assign it to a stream name.",
      "params": [
        {
          "name": "streamName",
          "datatype": "String",
          "description": "The identifier for the stream - for example, “q”."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "foreach",
      "signature": "public wave.QueryNode foreach(List<wave.ProjectionNode> projections)",
      "description": "Applies a set of expressions to every row in a dataset. This action is often referred to as projection.",
      "params": [
        {
          "name": "projections",
          "datatype": "List<wave.ProjectionNode>",
          "description": "A list of ProjectionNodes to be added to this QueryNode."
        }
      ],
      "datatype": "wave.QueryNode"
    },
    {
      "name": "group",
      "signature": "public wave.QueryNode group(List<String> groups)",
      "description": "Groups matched records (group by specific dataset attributes).",
      "params": [
        {
          "name": "groups",
          "datatype": "List<String>",
          "description": "A list of expressions."
        }
      ],
      "datatype": "wave.QueryNode"
    },
    {
      "name": "group",
      "signature": "public wave.QueryNode group()",
      "description": "Groups matched records (group by all).",
      "params": [],
      "datatype": "wave.QueryNode"
    },
    {
      "name": "order",
      "signature": "public wave.QueryNode group(List<String> groups)",
      "description": "Sorts in ascending or descending order on one or more fields.",
      "params": [
        {
          "name": "groups",
          "datatype": "List<String>",
          "description": "A list of column names and associated ascending or descending keywords, for example List&lt;List&lt;String&gt;&gt;{new List&lt;String&gt;{'Name', 'asc'}, new List&lt;String&gt;{'Revenue', 'desc'}}"
        }
      ],
      "datatype": "wave.QueryNode"
    },
    {
      "name": "cap",
      "signature": "global Wave.QueryNode cap(Integer cap)",
      "description": "Limits the number of results that are returned.",
      "params": [
        {
          "name": "cap",
          "datatype": "Integer",
          "description": "The maximum number of rows to return."
        }
      ],
      "datatype": "wave.QueryNode"
    },
    {
      "name": "filter",
      "signature": "public wave.QueryNode filter(String filterCondition)",
      "description": "Selects rows from a dataset based on a filter condition (a predicate).",
      "params": [
        {
          "name": "filterCondition",
          "datatype": "String",
          "description": "For example: filter('Name != \\'My Name\\'')"
        }
      ],
      "datatype": "wave.QueryNode"
    },
    {
      "name": "filter",
      "signature": "public wave.QueryNode filter(List<String> filterCondition)",
      "description": "Selects rows from a dataset based on multiple filter conditions (predicates).",
      "params": [
        {
          "name": "filterCondition",
          "datatype": "List<String>",
          "description": "A list of filter conditions."
        }
      ],
      "datatype": "wave.QueryNode"
    },
    {
      "name": "execute",
      "signature": "global ConnectApi.LiteralJson execute(String streamName)",
      "description": "Execute the query and return rows as JSON.",
      "params": [
        {
          "name": "streamName",
          "datatype": "String",
          "description": "The query stream to execute. For example:ConnectApi.LiteralJson result = Wave.QueryBuilder.load('datasetId', 'datasetVersionId').group().foreach(projs).execute('q');"
        }
      ],
      "datatype": "ConnectApi.LiteralJson"
    }
  ],
  "description": "Define each node of the query - such as projection, groups, order, filters. Execute the query.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_wave_QueryNode.htm"
}