{
  "name": "UserManagement",
  "namespace": "System",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "clone",
      "signature": "public Object clone()",
      "description": "Makes a duplicate copy of the System.UserManagement object.",
      "params": [],
      "datatype": "User Management"
    },
    {
      "name": "deregisterVerificationMethod",
      "signature": "public static void deregisterVerificationMethod(Id userId, Auth.VerificationMethod method)",
      "description": "Deregisters an identity verification method. Use this method to let users delete an existing verification method.",
      "params": [
        {
          "name": "method",
          "datatype": "Auth.VerificationMethod",
          "description": "User ID of the user deregistering the verification method. Verification method used to verify the identity of the user."
        }
      ],
      "datatype": "void"
    },
    {
      "name": "formatPhoneNumber",
      "signature": "global static String formatPhoneNumber(String countryCode, String phoneNumber)",
      "description": "Formats a mobile phone number for a user. Call this method to ensure that the phone number is formatted properly before updating a user’s mobile phone number.",
      "params": [
        {
          "name": "phoneNumber",
          "datatype": "String",
          "description": "A valid country code. A mobile number that contains from 3 through 49 numeric characters, without the country code. For example, (415) 555-1234."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "initPasswordlessLogin",
      "signature": "public static String initPasswordlessLogin(Id userId, Auth.VerificationMethod method)",
      "description": "Invokes a verification challenge for passwordless login when creating custom (Visualforce) Login and Verify pages for external users.",
      "params": [
        {
          "name": "method",
          "datatype": "Auth.VerificationMethod",
          "description": "ID of the user who’s logging in. Method used to verify the user’s identity, which can be EMAIL or SMS."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "initRegisterVerificationMethod",
      "signature": "public static String initRegisterVerificationMethod(Auth.VerificationMethod method)",
      "description": "Invokes a verification challenge for registering identity verification methods with a custom (Visualforce) page. Users can register either their email address or phone number.",
      "params": [
        {
          "name": "method",
          "datatype": "Auth.VerificationMethod",
          "description": "Method used to verify the user’s identity, which can be EMAIL or SMS."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "initSelfRegistration",
      "signature": "public static String initSelfRegistration(Auth.VerificationMethod method, User user)",
      "description": "Invokes a verification challenge for self-registration when creating a custom (Visualforce) Verify page for community self-registration.",
      "params": [
        {
          "name": "user",
          "datatype": "User",
          "description": "Method used to verify the identity of the user, which can be EMAIL or SMS. User object to insert after successful registration."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "obfuscateUser",
      "signature": "public static void obfuscateUser(Id userId, String username)",
      "description": "Scrambles users’ data on their request when they no longer want their personal data recognized in Salesforce. When you invoke the method for the user, the data becomes anonymous, and you can never recover it. Use this method to set the username to a specific value after it’s scrambled.",
      "params": [
        {
          "name": "username",
          "datatype": "String",
          "description": "ID of the user whose data this method scrambles. The username after the user’s data is scrambled. Sets the value of the scrambled username to a specific string."
        }
      ],
      "datatype": "void"
    },
    {
      "name": "obfuscateUser",
      "signature": "public static void obfuscateUser(Id userId)",
      "description": "Scrambles users’ data on their request when they no longer want their personal data recognized in Salesforce. When you invoke the method for the user, the data becomes anonymous, and you can never recover it.",
      "params": [
        {
          "name": "userId",
          "datatype": "Id",
          "description": "ID of the user whose data this method scrambles."
        }
      ],
      "datatype": "void"
    },
    {
      "name": "registerVerificationMethod",
      "signature": "public static System.PageReference registerVerificationMethod(Auth.VerificationMethod method, String startUrl)",
      "description": "Registers an identity verification method. Verification methods can be a time-based one-time password (TOTP), email or text verification code, Salesforce Authenticator, or U2F. End users register their verification methods.",
      "params": [
        {
          "name": "startUrl",
          "datatype": "String",
          "description": "Verification method used to verify the identity of the user. Path to the page that users see after they log in."
        }
      ],
      "datatype": "void"
    },
    {
      "name": "sendAsyncEmailConfirmation",
      "signature": "public static Boolean sendAsyncEmailConfirmation(String userId, String emailTemplateId, String networkId, String startUrl)",
      "description": "Send an email message to a user’s email address for verification. The message contains a verification link (URL) that the user clicks to verify the email address later on. You can send email verifications in bulk.",
      "params": [
        {
          "name": "startUrl",
          "datatype": "String",
          "description": "ID of the user to receive the email confirmation. ID of the email template in which the verification link is defined. ID of the community. The user is redirected to this page after verification, with a success or error message as the parameter. If null, the user is redirected to the login page."
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "verifyPasswordlessLogin",
      "signature": "public static Auth.VerificationResult verifyPasswordlessLogin(Id userId, Auth.VerificationMethod method, String identifier, String code, String startUrl)",
      "description": "Completes a verification challenge when creating a custom (Visualforce) Verify page for passwordless login. If the user who is trying to login enters the verification code successfully, the user is logged in.",
      "params": [
        {
          "name": "startUrl",
          "datatype": "String",
          "description": "ID of the user who’s logging in. Method used to verify the identity of the user, which can be either EMAIL or SMS. ID of the verification attempt received from the initPasswordlessLogin method. Code used to verify the identity of the user. The page where the user is directed after successful login."
        }
      ],
      "datatype": "Auth.VerificationResult"
    },
    {
      "name": "verifyRegisterVerificationMethod",
      "signature": "public static String verifyRegisterVerificationMethod(String code, Auth.VerificationMethod method)",
      "description": "Completes registering a user’s email address or phone number as a verification method when customizing the identity verification process.",
      "params": [
        {
          "name": "method",
          "datatype": "Auth.VerificationMethod",
          "description": "Code used to verify the identity of the user. Method used to verify the identity of the user, which can be either EMAIL or SMS."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "verifySelfRegistration",
      "signature": "public static Auth.VerificationResult verifySelfRegistration(Auth.VerificationMethod method, String identifier, String code, String startUrl)",
      "description": "Completes a verification challenge when creating a custom (Visualforce) Verify page for community self-registration. If the person who is attempting to register enters the verification code successfully, the user is created and logged in.",
      "params": [
        {
          "name": "startUrl",
          "datatype": "String",
          "description": "Method used to verify the identity of the user, which can be either EMAIL or SMS. The unique identifier received from the initSelfRegistration method. Code used to verify the identity of the user. The page where the user is directed after successful self-registration."
        }
      ],
      "datatype": "Auth.VerificationResult"
    }
  ],
  "description": "Contains methods to manage end users, for example, to register their verification methods, verify their identity, or remove their personal information.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_System_UserManagement.htm"
}