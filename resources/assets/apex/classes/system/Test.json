{
  "name": "Test",
  "namespace": "System",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "clearApexPageMessages",
      "signature": "public static void clearApexPageMessages()",
      "description": "Clear the messages on a Visualforce page while executing Apex test methods.",
      "params": [],
      "datatype": "void"
    },
    {
      "name": "createStub",
      "signature": "public static Object createStub(System.Type parentType, System.StubProvider stubProvider)",
      "description": "Creates a stubbed version of an Apex class that you can use for testing. This method is part of the Apex stub API. You can use it with the System.StubProvider interface to create a mocking framework.",
      "params": [
        {
          "name": "stubProvider",
          "datatype": "System.Type",
          "description": "The type of the Apex class to be stubbed. System.StubProvider An implementation of the StubProvider interface."
        }
      ],
      "datatype": "Object"
    },
    {
      "name": "enableChangeDataCapture",
      "signature": "public static void enableChangeDataCapture()",
      "description": "Use this method in an Apex test so that change event notifications are generated for all supported Change Data Capture entities. Call this method at the beginning of your test before performing DML operations and calling Test.getEventBus().deliver();.",
      "params": [],
      "datatype": "void"
    },
    {
      "name": "enqueueBatchJobs",
      "signature": "public static List<Id> enqueueBatchJobs(Integer numberOfJobs)",
      "description": "Adds the specified number of jobs with no-operation contents to the test-context queue. It first fills the test batch queue, up to the maximum 5 jobs, and then places jobs in the test flex queue. It throws a limit exception when the number of jobs in the test flex queue exceeds the allowed limit of 100 jobs.",
      "params": [
        {
          "name": "numberOfJobs",
          "datatype": "Integer",
          "description": "Number of test jobs to enqueue."
        }
      ],
      "datatype": "List<Id>"
    },
    {
      "name": "getEventBus",
      "signature": "public static EventBus.TestBroker getEventBus()",
      "description": "Returns an instance of the test event bus broker, which lets you operate on platform event or change event messages in an Apex test. For example, you can call Test.getEventBus().deliver() to deliver event messages.",
      "params": [],
      "datatype": "EventBus.TestBroker"
    },
    {
      "name": "getFlexQueueOrder",
      "signature": "public static List<Id> getFlexQueueOrder()",
      "description": "Returns an ordered list of job IDs for jobs in the test-context flex queue. The job at index 0 is the next job slated to run. This method returns only test-context results, even if it’s annotated with @IsTest(SeeAllData=true).",
      "params": [],
      "datatype": "List<Id>"
    },
    {
      "name": "getStandardPricebookId",
      "signature": "public static Id getStandardPricebookId()",
      "description": "Returns the ID of the standard price book in the organization.",
      "params": [],
      "datatype": "Id"
    },
    {
      "name": "invokeContinuationMethod",
      "signature": "public static Object invokeContinuationMethod(Object controller, Continuation request)",
      "description": "Invokes the callback method for the specified controller and continuation in a test method.",
      "params": [
        {
          "name": "request",
          "datatype": "Continuation",
          "description": "An instance of the controller class that invokes the continuation request. The continuation that is returned by an action method in the controller class."
        }
      ],
      "datatype": "Object"
    },
    {
      "name": "isRunningTest",
      "signature": "public static Boolean isRunningTest()",
      "description": "Returns true if the currently executing code was called by code contained in a test method, false otherwise. Use this method if you need to run different code depending on whether it was being called  from a test.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "loadData",
      "signature": "public static List<sObject> loadData(Schema.SObjectType sObjectToken, String resourceName)",
      "description": "Inserts test records from the specified static resource .csv file and for the specified sObject type, and returns a list of the inserted sObjects.",
      "params": [
        {
          "name": "resourceName",
          "datatype": "String",
          "description": "The sObject type for which to insert test records. The static resource that corresponds to the .csv file containing the test records to load. The name is case insensitive."
        }
      ],
      "datatype": "List<sObject>"
    },
    {
      "name": "newSendEmailQuickActionDefaults",
      "signature": "public static QuickAction.SendEmailQuickActionDefaults newSendEmailQuickActionDefaults(ID contextId, ID replyToId)",
      "description": "Creates a new QuickAction.SendEmailQuickActionDefaults instance for testing a class implementing the QuickAction.QuickActionDefaultsHandler interface.",
      "params": [
        {
          "name": "replyToId",
          "datatype": "Id",
          "description": "Parent record of the email message. Previous email message ID if this email message is a reply."
        }
      ],
      "datatype": "SendEmailQuickActionDefaults Class"
    },
    {
      "name": "setContinuationResponse",
      "signature": "public static void setContinuationResponse(String requestLabel, System.HttpResponse mockResponse)",
      "description": "Sets a mock response for a continuation HTTP request in a test method.",
      "params": [
        {
          "name": "mockResponse",
          "datatype": "HttpResponse",
          "description": "The unique label that corresponds to the continuation HTTP request. This label is returned by Continuation.addHttpRequest. The fake response to be returned by Test.invokeContinuationMethod."
        }
      ],
      "datatype": "void"
    },
    {
      "name": "setCreatedDate",
      "signature": "public static void setCreatedDate(Id recordId, Datetime createdDatetime)",
      "description": "Sets CreatedDate for a test-context sObject.",
      "params": [
        {
          "name": "createdDatetime",
          "datatype": "Datetime",
          "description": "The ID of an sObject. The value to assign to the sObject’s CreatedDate field."
        }
      ],
      "datatype": "void"
    },
    {
      "name": "setCurrentPage",
      "signature": "public static Void setCurrentPage(PageReference page)",
      "description": "A Visualforce test method that sets the current PageReference for the controller.",
      "params": [
        {
          "name": "page",
          "datatype": "System.PageReference",
          "description": ""
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setCurrentPageReference",
      "signature": "public static Void setCurrentPageReference(PageReference page)",
      "description": "A Visualforce test method that sets the current PageReference for the controller.",
      "params": [
        {
          "name": "page",
          "datatype": "System.PageReference",
          "description": ""
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setFixedSearchResults",
      "signature": "public static Void setFixedSearchResults(ID[] fixedSearchResults)",
      "description": "Defines a list of fixed search results to be returned by all subsequent SOSL statements in a test method.",
      "params": [
        {
          "name": "fixedSearchResults",
          "datatype": "ID[]",
          "description": "The list of record IDs specified by opt_set_search_results replaces the results that would normally be returned by the SOSL queries if they were not subject to any WHERE or LIMIT clauses. If these clauses exist in the SOSL queries, they are applied to the list of fixed search results."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setMock",
      "signature": "public static Void setMock(Type interfaceType, Object instance)",
      "description": "Sets the response mock mode and instructs the Apex runtime to send a mock response whenever a callout is made through the HTTP classes or the auto-generated code from WSDLs.",
      "params": [
        {
          "name": "instance",
          "datatype": "Object",
          "description": ""
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setReadOnlyApplicationMode",
      "signature": "public static Void setReadOnlyApplicationMode(Boolean applicationMode)",
      "description": "Sets the application mode for an organization to read-only in an Apex test to simulate read-only mode during Salesforce upgrades and downtimes. The application mode is reset to the default mode at the end of each Apex test run.",
      "params": [
        {
          "name": "applicationMode",
          "datatype": "Boolean",
          "description": ""
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "startTest",
      "signature": "public static Void startTest()",
      "description": "Marks the point in your test code when your test actually begins.  Use this method when you are testing governor limits.",
      "params": [],
      "datatype": "Void"
    },
    {
      "name": "stopTest",
      "signature": "public static Void stopTest()",
      "description": "Marks the point in your test code when your test ends. Use this method in conjunction with the startTest method.",
      "params": [],
      "datatype": "Void"
    },
    {
      "name": "testInstall",
      "signature": "public static Void testInstall(InstallHandler installImplementation, Version version, Boolean isPush)",
      "description": "Tests the implementation of the InstallHandler interface, which is used for specifying a post install script in packages. Tests run as the test initiator in the development environment.",
      "params": [
        {
          "name": "isPush",
          "datatype": "Boolean",
          "description": "A class that implements the InstallHandler interface. The version number of the existing package installed in the subscriber organization. (Optional) Specifies whether the upgrade is a push. The default value is false."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "testUninstall",
      "signature": "public static Void testUninstall(UninstallHandler uninstallImplementation)",
      "description": "Tests the implementation of the UninstallHandler interface, which is used for specifying an uninstall script in packages. Tests run as the test initiator in the development environment.",
      "params": [
        {
          "name": "uninstallImplementation",
          "datatype": "System.UninstallHandler",
          "description": "A class that implements the UninstallHandler interface."
        }
      ],
      "datatype": "Void"
    }
  ],
  "description": "Contains methods related to Apex tests.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_test.htm"
}