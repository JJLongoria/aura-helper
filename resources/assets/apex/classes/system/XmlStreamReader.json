{
  "name": "XmlStreamReader",
  "namespace": "System",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constuctors": [
    {
      "name": "XmlStreamReader",
      "signature": "public XmlStreamReader(String xmlInput)",
      "description": "Creates a new instance of the XmlStreamReader class for the specified XML input.",
      "methodParams": [
        {
          "name": "xmlInput",
          "datatype": "String"
        }
      ],
      "datatype": "void"
    }
  ],
  "methods": [
    {
      "name": "getAttributeCount",
      "signature": "public Integer getAttributeCount()",
      "description": "Returns the number of attributes on the start element, excluding namespace definitions.",
      "methodParams": [],
      "datatype": "Integer"
    },
    {
      "name": "getAttributeLocalName",
      "signature": "public String getAttributeLocalName(Integer index)",
      "description": "Returns the local name of the attribute at the specified index.",
      "methodParams": [
        {
          "name": "index",
          "datatype": "Integer"
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getAttributeNamespace",
      "signature": "public String getAttributeNamespace(Integer index)",
      "description": "Returns the namespace URI of the attribute at the specified index.",
      "methodParams": [
        {
          "name": "index",
          "datatype": "Integer"
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getAttributePrefix",
      "signature": "public String getAttributePrefix(Integer index)",
      "description": "Returns the prefix of this attribute at the specified index.",
      "methodParams": [
        {
          "name": "index",
          "datatype": "Integer"
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getAttributeType",
      "signature": "public String getAttributeType(Integer index)",
      "description": "Returns the XML type of the attribute at the specified index.",
      "methodParams": [
        {
          "name": "index",
          "datatype": "Integer"
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getAttributeValue",
      "signature": "public String getAttributeValue(String namespaceUri, String localName)",
      "description": "Returns the value of the attribute in the specified localName at the specified URI.",
      "methodParams": [
        {
          "name": "namespaceUri",
          "datatype": "String"
        },
        {
          "name": "localName",
          "datatype": "String"
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getAttributeValueAt",
      "signature": "public String getAttributeValueAt(Integer index)",
      "description": "Returns the value of the attribute at the specified index.",
      "methodParams": [
        {
          "name": "index",
          "datatype": "Integer"
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getEventType",
      "signature": "public System.XmlTag getEventType()",
      "description": "Returns the type of XML event the cursor is pointing to.",
      "methodParams": [],
      "datatype": "System.XmlTag"
    },
    {
      "name": "getLocalName",
      "signature": "public String getLocalName()",
      "description": "Returns the local name of the current event.",
      "methodParams": [],
      "datatype": "String"
    },
    {
      "name": "getLocation",
      "signature": "public String getLocation()",
      "description": "Return the current location of the cursor.",
      "methodParams": [],
      "datatype": "String"
    },
    {
      "name": "getNamespace",
      "signature": "public String getNamespace()",
      "description": "If the current event is a start element or end element, this method returns the URI of the prefix or the default namespace.",
      "methodParams": [],
      "datatype": "String"
    },
    {
      "name": "getNamespaceCount",
      "signature": "public Integer getNamespaceCount()",
      "description": "Returns the number of namespaces declared on a start element or end element.",
      "methodParams": [],
      "datatype": "Integer"
    },
    {
      "name": "getNamespacePrefix",
      "signature": "public String getNamespacePrefix(Integer index)",
      "description": "Returns the prefix for the namespace declared at the index.",
      "methodParams": [
        {
          "name": "index",
          "datatype": "Integer"
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getNamespaceURI",
      "signature": "public String getNamespaceURI(String prefix)",
      "description": "Return the URI for the given prefix.",
      "methodParams": [
        {
          "name": "prefix",
          "datatype": "String"
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getNamespaceURIAt",
      "signature": "public String getNamespaceURIAt(Integer index)",
      "description": "Returns the URI for the namespace declared at the index.",
      "methodParams": [
        {
          "name": "index",
          "datatype": "Integer"
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getPIData",
      "signature": "public String getPIData()",
      "description": "Returns the data section of a processing instruction.",
      "methodParams": [],
      "datatype": "String"
    },
    {
      "name": "getPITarget",
      "signature": "public String getPITarget()",
      "description": "Returns the target section of a processing instruction.",
      "methodParams": [],
      "datatype": "String"
    },
    {
      "name": "getPrefix",
      "signature": "public String getPrefix()",
      "description": "Returns the prefix of the current XML event or null if the event does not have a prefix.",
      "methodParams": [],
      "datatype": "String"
    },
    {
      "name": "getText",
      "signature": "public String getText()",
      "description": "Returns the current value of the XML event as a string.",
      "methodParams": [],
      "datatype": "String"
    },
    {
      "name": "getVersion",
      "signature": "public String getVersion()",
      "description": "Returns the XML version specified on the XML declaration. Returns null if none was declared.",
      "methodParams": [],
      "datatype": "String"
    },
    {
      "name": "hasName",
      "signature": "public Boolean hasName()",
      "description": "Returns true if the current XML event has a name. Returns false otherwise.",
      "methodParams": [],
      "datatype": "Boolean"
    },
    {
      "name": "hasNext",
      "signature": "public Boolean hasNext()",
      "description": "Returns true if there are more  XML events and false if there are no more XML events.",
      "methodParams": [],
      "datatype": "Boolean"
    },
    {
      "name": "hasText",
      "signature": "public Boolean hasText()",
      "description": "Returns true if the current event has text, false otherwise.",
      "methodParams": [],
      "datatype": "Boolean"
    },
    {
      "name": "isCharacters",
      "signature": "public Boolean isCharacters()",
      "description": "Returns true if the cursor points to a character data XML event. Otherwise, returns false.",
      "methodParams": [],
      "datatype": "Boolean"
    },
    {
      "name": "isEndElement",
      "signature": "public Boolean isEndElement()",
      "description": "Returns true if the cursor points to an end tag. Otherwise, it returns false.",
      "methodParams": [],
      "datatype": "Boolean"
    },
    {
      "name": "isStartElement",
      "signature": "public Boolean isStartElement()",
      "description": "Returns true if the cursor points to a start tag. Otherwise, it returns false.",
      "methodParams": [],
      "datatype": "Boolean"
    },
    {
      "name": "isWhiteSpace",
      "signature": "public Boolean isWhiteSpace()",
      "description": "Returns true if the cursor points to a character data XML event that consists of all white space. Otherwise it returns false.",
      "methodParams": [],
      "datatype": "Boolean"
    },
    {
      "name": "next",
      "signature": "public Integer next()",
      "description": "Reads the next XML event. A processor may return all contiguous character data in a single chunk, or it may split it into several chunks. Returns an integer which indicates the type of event.",
      "methodParams": [],
      "datatype": "Integer"
    },
    {
      "name": "nextTag",
      "signature": "public Integer nextTag()",
      "description": "Skips any white space (the isWhiteSpace method returns true), comment, or processing instruction XML events, until a start element or end element is reached. Returns the index for that XML event.",
      "methodParams": [],
      "datatype": "Integer"
    },
    {
      "name": "setCoalescing",
      "signature": "public Void setCoalescing(Boolean returnAsSingleBlock)",
      "description": "If you specify true for returnAsSingleBlock, text is returned in a single block, from a start element to the first end element or the next start element, whichever comes first. If you specify it as false, the parser may return text in multiple blocks.",
      "methodParams": [
        {
          "name": "returnAsSingleBlock",
          "datatype": "Boolean"
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setNamespaceAware",
      "signature": "public Void setNamespaceAware(Boolean isNamespaceAware)",
      "description": "If you specify true for isNamespaceAware, the parser recognizes namespace. If you specify it as false, the parser does not. The default value is true.",
      "methodParams": [
        {
          "name": "isNamespaceAware",
          "datatype": "Boolean"
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "toString",
      "signature": "public String toString()",
      "description": "Returns a string containing the length of the input XML given to XmlStreamReader and the first 50 characters of the input XML.",
      "methodParams": [],
      "datatype": "String"
    }
  ],
  "description": "The XmlStreamReader class provides methods for",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_xml_XmlStream_reader.htm#apex_classes_xml_XmlStream_reader"
}