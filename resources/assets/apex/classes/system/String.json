{
  "name": "String",
  "namespace": "System",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "abbreviate",
      "signature": "public String abbreviate(Integer maxWidth)",
      "description": "Returns an abbreviated version of the String, of the specified length and with ellipses appended if the current String is longer than the specified length; otherwise, returns the original String without ellipses.",
      "params": [
        {
          "name": "maxWidth",
          "datatype": "Integer",
          "description": "If maxWidth is less than four, this method throws a run-time exception."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "abbreviate",
      "signature": "public String abbreviate(Integer maxWidth, Integer offset)",
      "description": "Returns an abbreviated version of the String, starting at the specified character offset and of the specified length. The returned String has ellipses appended at the start and the end if characters have been removed at these locations.",
      "params": [
        {
          "name": "offset",
          "datatype": "Integer",
          "description": "Note that the offset is not necessarily the leftmost character in the returned String or the first character following the ellipses, but it appears somewhere in the result.  Regardless, abbreviate won’t return a String of length greater than maxWidth.If maxWidth is too small, this method throws a run-time exception."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "capitalize",
      "signature": "public String capitalize()",
      "description": "Returns the current String with the first letter changed to title case.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "center",
      "signature": "public String center(Integer size)",
      "description": "Returns a version of the current String of the specified size padded with spaces on the left and right, so that it appears in the center. If the specified size is smaller than the current String size, the entire String is returned without added spaces.",
      "params": [
        {
          "name": "size",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "center",
      "signature": "public String center(Integer size, String paddingString)",
      "description": "Returns a version of the current String of the specified size padded with the specified String on the left and right, so that it appears in the center. If the specified size is smaller than the current String size, the entire String is returned without padding.",
      "params": [
        {
          "name": "paddingString",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "charAt",
      "signature": "public Integer charAt(Integer index)",
      "description": "Returns the value of the character at the specified index.",
      "params": [
        {
          "name": "index",
          "datatype": "Integer",
          "description": "The index of the character to get the value of."
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "codePointAt",
      "signature": "public Integer codePointAt(Integer index)",
      "description": "Returns the Unicode code point value at the specified index.",
      "params": [
        {
          "name": "index",
          "datatype": "Integer",
          "description": "The index of the characters (Unicode code units) in the string. The index range is from zero to the string length minus one."
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "codePointBefore",
      "signature": "public Integer codePointBefore(Integer index)",
      "description": "Returns the Unicode code point value that occurs before the specified index.",
      "params": [
        {
          "name": "index",
          "datatype": "Integer",
          "description": "The index before the Unicode code point that is to be returned. The index range is from one to the string length."
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "codePointCount",
      "signature": "public Integer codePointCount(Integer beginIndex, Integer endIndex)",
      "description": "Returns the number of Unicode code points within the specified text range.",
      "params": [
        {
          "name": "endIndex",
          "datatype": "Integer",
          "description": "The index of the first character in the range. The index after the last character in the range."
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "compareTo",
      "signature": "public Integer compareTo(String secondString)",
      "description": "Compares two strings lexicographically, based on the Unicode value of each character in the Strings.",
      "params": [
        {
          "name": "secondString",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "contains",
      "signature": "public Boolean contains(String substring)",
      "description": "Returns true if and only if the String that called the method contains the specified sequence of characters in substring.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "containsAny",
      "signature": "public Boolean containsAny(String inputString)",
      "description": "Returns true if the current String contains any of the characters in the specified String; otherwise, returns false.",
      "params": [
        {
          "name": "inputString",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "containsIgnoreCase",
      "signature": "public Boolean containsIgnoreCase(String substring)",
      "description": "Returns true if the current String contains the specified sequence of characters without regard to case; otherwise, returns false.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "containsNone",
      "signature": "public Boolean containsNone(String inputString)",
      "description": "Returns true if the current String doesn’t contain any of the characters in the specified String; otherwise, returns false.",
      "params": [
        {
          "name": "inputString",
          "datatype": "String",
          "description": "If inputString is an empty string or the current String is empty, this method returns true. If inputString is null, this method returns a run-time exception."
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "containsOnly",
      "signature": "public Boolean containsOnly(String inputString)",
      "description": "Returns true if the current String contains characters only from the specified sequence of characters and not any other characters; otherwise, returns false.",
      "params": [
        {
          "name": "inputString",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "containsWhitespace",
      "signature": "public Boolean containsWhitespace()",
      "description": "Returns true if the current String contains any white space characters; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "countMatches",
      "signature": "public Integer countMatches(String substring)",
      "description": "Returns the number of times the specified substring occurs in the current String.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "deleteWhitespace",
      "signature": "public String deleteWhitespace()",
      "description": "Returns a version of the current String with all white space characters removed.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "difference",
      "signature": "public String difference(String secondString)",
      "description": "Returns the difference between the current String and the specified String.",
      "params": [
        {
          "name": "secondString",
          "datatype": "String",
          "description": "If secondString is an empty string, this method returns an empty string.If secondString is null, this method throws a run-time exception."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "endsWith",
      "signature": "public Boolean endsWith(String suffix)",
      "description": "Returns true if the String that called the method ends with the specified suffix.",
      "params": [
        {
          "name": "suffix",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "endsWithIgnoreCase",
      "signature": "public Boolean endsWithIgnoreCase(String suffix)",
      "description": "Returns true if the current String ends with the specified suffix; otherwise, returns false.",
      "params": [
        {
          "name": "suffix",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "equals",
      "signature": "public Boolean equals(String secondString)",
      "description": "Deprecated. This method is replaced by equals(stringOrId). Returns true if the passed-in string is not null and represents the same binary sequence of characters as the current string. Use this method to perform case-sensitive comparisons.",
      "params": [
        {
          "name": "secondString",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "equals",
      "signature": "public Boolean equals(Object stringOrId)",
      "description": "Returns true if the passed-in object is not null and represents the same binary sequence of characters as the current string. Use this method to compare a string to an object that represents a string or an ID.",
      "params": [
        {
          "name": "stringOrId",
          "datatype": "Object",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "equalsIgnoreCase",
      "signature": "public Boolean equalsIgnoreCase(String secondString)",
      "description": "Returns true if the secondString is not null and represents the same sequence of characters as the String that called the method, ignoring case.",
      "params": [
        {
          "name": "secondString",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "escapeCsv",
      "signature": "public String escapeCsv()",
      "description": "Returns a String for a CSV column enclosed in double quotes, if required.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "escapeEcmaScript",
      "signature": "public String escapeEcmaScript()",
      "description": "Escapes the characters in the String using EcmaScript String rules.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "escapeHtml3",
      "signature": "public String escapeHtml3()",
      "description": "Escapes the characters in a String using HTML 3.0 entities.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "escapeHtml4",
      "signature": "public String escapeHtml4()",
      "description": "Escapes the characters in a String using HTML 4.0 entities.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "escapeJava",
      "signature": "public String escapeJava()",
      "description": "Returns a String whose characters are escaped using Java String rules. Characters escaped include quotes and control characters, such as tab, backslash, and carriage return characters.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "escapeSingleQuotes",
      "signature": "public static String escapeSingleQuotes(String stringToEscape)",
      "description": "Returns a String with the escape character (\\) added before any single quotation marks in the String s.",
      "params": [
        {
          "name": "stringToEscape",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "escapeUnicode",
      "signature": "public String escapeUnicode()",
      "description": "Returns a String whose Unicode characters are escaped to a Unicode escape sequence.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "escapeXml",
      "signature": "public String escapeXml()",
      "description": "Escapes the characters in a String using XML entities.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "format",
      "signature": "public static String format(String stringToFormat, List<Object> formattingArguments)",
      "description": "Treat the first argument as a pattern and return a string using the second argument for substitution and formatting. The substitution and formatting are the same as apex:outputText and the Java MessageFormat class. Non-string types in the second argument’s List are implicitly converted to strings, respecting the toString() method overrides that exist on the type.",
      "params": [
        {
          "name": "formattingArguments",
          "datatype": "List<Object>",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "fromCharArray",
      "signature": "public static String fromCharArray(List<Integer> charArray)",
      "description": "Returns a String from the values of the list of integers.",
      "params": [
        {
          "name": "charArray",
          "datatype": "List<Integer>",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getChars",
      "signature": "public List<Integer> getChars()",
      "description": "Returns an array of character values that represent the characters in this string.",
      "params": [],
      "datatype": "List<Integer>"
    },
    {
      "name": "getCommonPrefix",
      "signature": "public static String getCommonPrefix(List<String> strings)",
      "description": "Returns the initial sequence of characters as a String that is common to all the specified Strings.",
      "params": [
        {
          "name": "strings",
          "datatype": "List<String>",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "getLevenshteinDistance",
      "signature": "public Integer getLevenshteinDistance(String stringToCompare)",
      "description": "Returns the Levenshtein distance between the current String and the specified String.",
      "params": [
        {
          "name": "stringToCompare",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "getLevenshteinDistance",
      "signature": "public Integer getLevenshteinDistance(String stringToCompare, Integer threshold)",
      "description": "Returns the Levenshtein distance between the current String and the specified String if it is less than or equal than the given threshold; otherwise, returns -1.",
      "params": [
        {
          "name": "threshold",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "hashCode",
      "signature": "public Integer hashCode()",
      "description": "Returns a hash code value for this string.",
      "params": [],
      "datatype": "Integer"
    },
    {
      "name": "indexOf",
      "signature": "public Integer indexOf(String substring)",
      "description": "Returns the index of the first occurrence of the specified substring. If the substring does not occur, this method returns -1.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "indexOf",
      "signature": "public Integer indexOf(String substring, Integer index)",
      "description": "Returns the zero-based index of the first occurrence of the specified substring from the point of the given index. If the substring does not occur, this method returns -1.",
      "params": [
        {
          "name": "index",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "indexOfAny",
      "signature": "public Integer indexOfAny(String substring)",
      "description": "Returns the zero-based index of the first occurrence of any character specified in the substring. If none of the characters occur, returns -1.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "indexOfAnyBut",
      "signature": "public Integer indexOfAnyBut(String substring)",
      "description": "Returns the zero-based index of the first occurrence of a character that is not in the specified substring. Otherwise, returns -1.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "indexOfChar",
      "signature": "public Integer indexOfChar(Integer character)",
      "description": "Returns the index of the first occurrence of the character that corresponds to the specified character value.",
      "params": [
        {
          "name": "character",
          "datatype": "Integer",
          "description": "The integer value of the character in the string."
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "indexOfChar",
      "signature": "public Integer indexOfChar(Integer character, Integer startIndex)",
      "description": "Returns the index of the first occurrence of the character that corresponds to the specified character value, starting from the specified index.",
      "params": [
        {
          "name": "startIndex",
          "datatype": "Integer",
          "description": "The integer value of the character to look for. The index to start the search from."
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "indexOfDifference",
      "signature": "public Integer indexOfDifference(String stringToCompare)",
      "description": "Returns the zero-based index of the character where the current String begins to differ from the specified String.",
      "params": [
        {
          "name": "stringToCompare",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "indexOfIgnoreCase",
      "signature": "public Integer indexOfIgnoreCase(String substring)",
      "description": "Returns the zero-based index of the first occurrence of the specified substring without regard to case. If the substring does not occur, this method returns -1.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "indexOfIgnoreCase",
      "signature": "public Integer indexOfIgnoreCase(String substring, Integer startPosition)",
      "description": "Returns the zero-based index of the first occurrence of the specified substring from the point of index i, without regard to case. If the substring does not occur, this method returns -1.",
      "params": [
        {
          "name": "startPosition",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "isAllLowerCase",
      "signature": "public Boolean isAllLowerCase()",
      "description": "Returns true if all characters in the current String are lowercase; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isAllUpperCase",
      "signature": "public Boolean isAllUpperCase()",
      "description": "Returns true if all characters in the current String are uppercase; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isAlpha",
      "signature": "public Boolean isAlpha()",
      "description": "Returns true if all characters in the current String are Unicode letters only; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isAlphaSpace",
      "signature": "public Boolean isAlphaSpace()",
      "description": "Returns true if all characters in the current String are Unicode letters or spaces only; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isAlphanumeric",
      "signature": "public Boolean isAlphanumeric()",
      "description": "Returns true if all characters in the current String are Unicode letters or numbers only; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isAlphanumericSpace",
      "signature": "public Boolean isAlphanumericSpace()",
      "description": "Returns true if all characters in the current String are Unicode letters, numbers, or spaces only; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isAsciiPrintable",
      "signature": "public Boolean isAsciiPrintable()",
      "description": "Returns true if the current String contains only ASCII printable characters; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isBlank",
      "signature": "public static Boolean isBlank(String inputString)",
      "description": "Returns true if the specified String is white space, empty (''), or null; otherwise, returns false.",
      "params": [
        {
          "name": "inputString",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "isEmpty",
      "signature": "public static Boolean isEmpty(String inputString)",
      "description": "Returns true if the specified String is empty ('') or null; otherwise, returns false.",
      "params": [
        {
          "name": "inputString",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "isNotBlank",
      "signature": "public static Boolean isNotBlank(String inputString)",
      "description": "Returns true if the specified String is not whitespace, not empty (''), and not null; otherwise, returns false.",
      "params": [
        {
          "name": "inputString",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "isNotEmpty",
      "signature": "public static Boolean isNotEmpty(String inputString)",
      "description": "Returns true if the specified String is not empty ('') and not null; otherwise, returns false.",
      "params": [
        {
          "name": "inputString",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "isNumeric",
      "signature": "public Boolean isNumeric()",
      "description": "Returns true if the current String contains only Unicode digits; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isNumericSpace",
      "signature": "public Boolean isNumericSpace()",
      "description": "Returns true if the current String contains only Unicode digits or spaces; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isWhitespace",
      "signature": "public Boolean isWhitespace()",
      "description": "Returns true if the current String contains only white space characters or is empty; otherwise, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "join",
      "signature": "public static String join(Object iterableObj, String separator)",
      "description": "Joins the elements of the specified iterable object, such as a List, into a single String separated by the specified separator.",
      "params": [
        {
          "name": "separator",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "lastIndexOf",
      "signature": "public Integer lastIndexOf(String substring)",
      "description": "Returns the index of the last occurrence of the specified substring. If the substring does not occur, this method returns -1.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "lastIndexOf",
      "signature": "public Integer lastIndexOf(String substring, Integer endPosition)",
      "description": "Returns the index of the last occurrence of the specified substring, starting from the character at index 0 and ending at the specified index.",
      "params": [
        {
          "name": "endPosition",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "lastIndexOfChar",
      "signature": "public Integer lastIndexOfChar(Integer character)",
      "description": "Returns the index of the last occurrence of the character that corresponds to the specified character value.",
      "params": [
        {
          "name": "character",
          "datatype": "Integer",
          "description": "The integer value of the character in the string."
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "lastIndexOfChar",
      "signature": "public Integer lastIndexOfChar(Integer character, Integer endIndex)",
      "description": "Returns the index of the last occurrence of the character that corresponds to the specified character value, starting from the specified index.",
      "params": [
        {
          "name": "endIndex",
          "datatype": "Integer",
          "description": "The integer value of the character to look for. The index to end the search at."
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "lastIndexOfIgnoreCase",
      "signature": "public Integer lastIndexOfIgnoreCase(String substring)",
      "description": "Returns the index of the last occurrence of the specified substring regardless of case.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "lastIndexOfIgnoreCase",
      "signature": "public Integer lastIndexOfIgnoreCase(String substring, Integer endPosition)",
      "description": "Returns the index of the last occurrence of the specified substring regardless of case, starting from the character at index 0 and ending at the specified index.",
      "params": [
        {
          "name": "endPosition",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "left",
      "signature": "public String left(Integer length)",
      "description": "Returns the leftmost characters of the current String of the specified length.",
      "params": [
        {
          "name": "length",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "leftPad",
      "signature": "public String leftPad(Integer length)",
      "description": "Returns the current String padded with spaces on the left and of the specified length.",
      "params": [
        {
          "name": "length",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "leftPad",
      "signature": "public String leftPad(Integer length, String padStr)",
      "description": "Returns the current String padded with String padStr on the left and of the specified length.",
      "params": [
        {
          "name": "padStr",
          "datatype": "String",
          "description": "String to pad with; if null or empty treated as single blank."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "length",
      "signature": "public Integer length()",
      "description": "Returns the number of 16-bit Unicode characters contained in the String.",
      "params": [],
      "datatype": "Integer"
    },
    {
      "name": "mid",
      "signature": "public String mid(Integer startIndex, Integer length)",
      "description": "Returns a new String that begins with the character at the specified zero-based startIndex with the number of characters specified by length.",
      "params": [
        {
          "name": "length",
          "datatype": "Integer",
          "description": "If startIndex is negative, it is considered to be zero. If length is negative or zero, an empty String is returned. If length is greater than the remaining characters, the remainder of the String is returned."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "normalizeSpace",
      "signature": "public String normalizeSpace()",
      "description": "Returns the current String with leading, trailing, and repeating white space characters removed.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "offsetByCodePoints",
      "signature": "public Integer offsetByCodePoints(Integer index, Integer codePointOffset)",
      "description": "Returns the index of the Unicode code point that is offset by the specified number of code points, starting from the given index.",
      "params": [
        {
          "name": "codePointOffset",
          "datatype": "Integer",
          "description": "The start index in the string. The number of code points to be offset."
        }
      ],
      "datatype": "Integer"
    },
    {
      "name": "remove",
      "signature": "public String remove(String substring)",
      "description": "Removes all occurrences of the specified substring and returns the String result.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "removeEnd",
      "signature": "public String removeEnd(String substring)",
      "description": "Removes the specified substring only if it occurs at the end of the String.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "removeEndIgnoreCase",
      "signature": "public String removeEndIgnoreCase(String substring)",
      "description": "Removes the specified substring only if it occurs at the end of the String using a case-insensitive match.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "removeStart",
      "signature": "public String removeStart(String substring)",
      "description": "Removes the specified substring only if it occurs at the beginning of the String.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "removeStartIgnoreCase",
      "signature": "public String removeStartIgnoreCase(String substring)",
      "description": "Removes the specified substring only if it occurs at the beginning of the String using a case-insensitive match.",
      "params": [
        {
          "name": "substring",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "repeat",
      "signature": "public String repeat(Integer numberOfTimes)",
      "description": "Returns the current String repeated the specified number of times.",
      "params": [
        {
          "name": "numberOfTimes",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "repeat",
      "signature": "public String repeat(String separator, Integer numberOfTimes)",
      "description": "Returns the current String repeated the specified number of times using the specified separator to separate the repeated Strings.",
      "params": [
        {
          "name": "numberOfTimes",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "replace",
      "signature": "public String replace(String target, String replacement)",
      "description": "Replaces each substring of a string that matches the literal target sequence target with the specified literal replacement sequence replacement.",
      "params": [
        {
          "name": "replacement",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "replaceAll",
      "signature": "public String replaceAll(String regExp, String replacement)",
      "description": "Replaces each substring of a string that matches the regular expression regExp with the replacement sequence replacement.",
      "params": [
        {
          "name": "replacement",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "replaceFirst",
      "signature": "public String replaceFirst(String regExp, String replacement)",
      "description": "Replaces the first substring of a string that matches the regular expression regExp with the replacement sequence replacement.",
      "params": [
        {
          "name": "replacement",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "reverse",
      "signature": "public String reverse()",
      "description": "Returns a String with all the characters reversed.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "right",
      "signature": "public String right(Integer length)",
      "description": "Returns the rightmost characters of the current String of the specified length.",
      "params": [
        {
          "name": "length",
          "datatype": "Integer",
          "description": "If length is greater than the String size, the entire String is returned."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "rightPad",
      "signature": "public String rightPad(Integer length)",
      "description": "Returns the current String padded with spaces on the right and of the specified length.",
      "params": [
        {
          "name": "length",
          "datatype": "Integer",
          "description": "If length is less than or equal to the current String size, the entire String is returned without space padding."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "rightPad",
      "signature": "public String rightPad(Integer length, String padStr)",
      "description": "Returns the current String padded with String padStr on the right and of the specified length.",
      "params": [
        {
          "name": "padStr",
          "datatype": "String",
          "description": "String to pad with; if null or empty treated as single blank."
        }
      ],
      "datatype": "String"
    },
    {
      "name": "split",
      "signature": "public String[] split(String regExp)",
      "description": "Returns a list that contains each substring of the String that is terminated by either the regular expression regExp or the end of the String.",
      "params": [
        {
          "name": "regExp",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String[]"
    },
    {
      "name": "split",
      "signature": "public String[] split(String regExp, Integer limit)",
      "description": "Returns a list that contains each substring of the String that is terminated by either the regular expression regExp or the end of the String.",
      "params": [
        {
          "name": "limit",
          "datatype": "Integer",
          "description": "A regular expression."
        }
      ],
      "datatype": "String[]"
    },
    {
      "name": "splitByCharacterType",
      "signature": "public List<String> splitByCharacterType()",
      "description": "Splits the current String by character type and returns a list of contiguous character groups of the same type as complete tokens.",
      "params": [],
      "datatype": "List<String>"
    },
    {
      "name": "splitByCharacterTypeCamelCase",
      "signature": "public List<String> splitByCharacterTypeCamelCase()",
      "description": "Splits the current String by character type and returns a list of contiguous character groups of the same type as complete tokens, with the following exception: the uppercase character, if any, immediately preceding a lowercase character token belongs to the following character token rather than to the preceding.",
      "params": [],
      "datatype": "List<String>"
    },
    {
      "name": "startsWith",
      "signature": "public Boolean startsWith(String prefix)",
      "description": "Returns true if the String that called the method begins with the specified prefix.",
      "params": [
        {
          "name": "prefix",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "startsWithIgnoreCase",
      "signature": "public Boolean startsWithIgnoreCase(String prefix)",
      "description": "Returns true if the current String begins with the specified prefix regardless of the prefix case.",
      "params": [
        {
          "name": "prefix",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "stripHtmlTags",
      "signature": "public String stripHtmlTags(String htmlInput)",
      "description": "Removes HTML markup and returns plain text.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "substring",
      "signature": "public String substring(Integer startIndex)",
      "description": "Returns a new String that begins with the character at the specified zero-based startIndex and extends to the end of the String.",
      "params": [
        {
          "name": "startIndex",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "substring",
      "signature": "public String substring(Integer startIndex, Integer endIndex)",
      "description": "Returns a new String that begins with the character at the specified zero-based startIndex and extends to the character at endIndex - 1.",
      "params": [
        {
          "name": "endIndex",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "substringAfter",
      "signature": "public String substringAfter(String separator)",
      "description": "Returns the substring that occurs after the first occurrence of the specified separator.",
      "params": [
        {
          "name": "separator",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "substringAfterLast",
      "signature": "public String substringAfterLast(String separator)",
      "description": "Returns the substring that occurs after the last occurrence of the specified separator.",
      "params": [
        {
          "name": "separator",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "substringBefore",
      "signature": "public String substringBefore(String separator)",
      "description": "Returns the substring that occurs before the first occurrence of the specified separator.",
      "params": [
        {
          "name": "separator",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "substringBeforeLast",
      "signature": "public String substringBeforeLast(String separator)",
      "description": "Returns the substring that occurs before the last occurrence of the specified separator.",
      "params": [
        {
          "name": "separator",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "substringBetween",
      "signature": "public String substringBetween(String tag)",
      "description": "Returns the substring that occurs between two instances of the specified tag String.",
      "params": [
        {
          "name": "tag",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "substringBetween",
      "signature": "public String substringBetween(String open, String close)",
      "description": "Returns the substring that occurs between the two specified Strings.",
      "params": [
        {
          "name": "close",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "swapCase",
      "signature": "public String swapCase()",
      "description": "Swaps the case of all characters and returns the resulting String by using the default (English US) locale.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "toLowerCase",
      "signature": "public String toLowerCase()",
      "description": "Converts all of the characters in the String to lowercase using the rules of the default (English US) locale.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "toLowerCase",
      "signature": "public String toLowerCase(String locale)",
      "description": "Converts all of the characters in the String to lowercase using the rules of the specified locale.",
      "params": [
        {
          "name": "locale",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "toUpperCase",
      "signature": "public String toUpperCase()",
      "description": "Converts all of the characters in the String to uppercase using the rules of the default (English US) locale.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "toUpperCase",
      "signature": "public String toUpperCase(String locale)",
      "description": "Converts all of the characters in the String to the uppercase using the rules of the specified locale.",
      "params": [
        {
          "name": "locale",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "trim",
      "signature": "public String trim()",
      "description": "Returns a copy of the string that no longer contains any leading or trailing white space characters.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "uncapitalize",
      "signature": "public String uncapitalize()",
      "description": "Returns the current String with the first letter in lowercase.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "unescapeCsv",
      "signature": "public String unescapeCsv()",
      "description": "Returns a String representing an unescaped CSV column.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "unescapeEcmaScript",
      "signature": "public String unescapeEcmaScript()",
      "description": "Unescapes any EcmaScript literals found in the String.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "unescapeHtml3",
      "signature": "public String unescapeHtml3()",
      "description": "Unescapes the characters in a String using HTML 3.0 entities.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "unescapeHtml4",
      "signature": "public String unescapeHtml4()",
      "description": "Unescapes the characters in a String using HTML 4.0 entities.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "unescapeJava",
      "signature": "public String unescapeJava()",
      "description": "Returns a String whose Java literals are unescaped. Literals unescaped include escape sequences for quotes (\\\\\") and control characters, such as tab (\\\\t), and carriage return (\\\\n).",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "unescapeUnicode",
      "signature": "public String unescapeUnicode()",
      "description": "Returns a String whose escaped Unicode characters are unescaped.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "unescapeXml",
      "signature": "public String unescapeXml()",
      "description": "Unescapes the characters in a String using XML entities.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "valueOf",
      "signature": "public static String valueOf(Date dateToConvert)",
      "description": "Returns a String that represents the specified Date in the standard “yyyy-MM-dd” format.",
      "params": [
        {
          "name": "dateToConvert",
          "datatype": "Date",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "valueOf",
      "signature": "public static String valueOf(Datetime datetimeToConvert)",
      "description": "Returns a String that represents the specified Datetime in the standard “yyyy-MM-dd HH:mm:ss” format for the local time zone.",
      "params": [
        {
          "name": "datetimeToConvert",
          "datatype": "Datetime",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "valueOf",
      "signature": "public static String valueOf(Decimal decimalToConvert)",
      "description": "Returns a String that represents the specified Decimal.",
      "params": [
        {
          "name": "decimalToConvert",
          "datatype": "Decimal",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "valueOf",
      "signature": "public static String valueOf(Double doubleToConvert)",
      "description": "Returns a String that represents the specified Double.",
      "params": [
        {
          "name": "doubleToConvert",
          "datatype": "Double",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "valueOf",
      "signature": "public static String valueOf(Integer integerToConvert)",
      "description": "Returns a String that represents the specified Integer.",
      "params": [
        {
          "name": "integerToConvert",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "valueOf",
      "signature": "public static String valueOf(Long longToConvert)",
      "description": "Returns a String that represents the specified Long.",
      "params": [
        {
          "name": "longToConvert",
          "datatype": "Long",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "valueOf",
      "signature": "public static String valueOf(Object toConvert)",
      "description": "Returns a string representation of the specified object argument.",
      "params": [
        {
          "name": "toConvert",
          "datatype": "Object",
          "description": ""
        }
      ],
      "datatype": "String"
    },
    {
      "name": "valueOfGmt",
      "signature": "public static String valueOfGmt(Datetime datetimeToConvert)",
      "description": "Returns a String that represents the specified Datetime in the standard “yyyy-MM-dd HH:mm:ss” format for the GMT time zone.",
      "params": [
        {
          "name": "datetimeToConvert",
          "datatype": "Datetime",
          "description": ""
        }
      ],
      "datatype": "String"
    }
  ],
  "description": "Contains methods for the String primitive data type.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_string.htm"
}