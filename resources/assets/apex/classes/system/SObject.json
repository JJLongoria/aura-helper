{
  "name": "SObject",
  "namespace": "System",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "addError",
      "signature": "public Void addError(String errorMsg)",
      "description": "Marks a trigger record with a custom error message and prevents any DML operation from occurring.",
      "params": [
        {
          "name": "errorMsg",
          "datatype": "String",
          "description": "The error message to mark the record with."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "addError",
      "signature": "public Void addError(String errorMsg, Boolean escape)",
      "description": "Marks a trigger record with a custom error message, specifies if the error message should be escaped, and prevents any DML operation from occurring.",
      "params": [
        {
          "name": "escape",
          "datatype": "Boolean",
          "description": "The error message to mark the record with.   Indicates whether any HTML markup in the custom error message should be escaped (true) or not (false). This parameter is ignored in Lightning Experience and the Salesforce app and the HTML is always escaped. The escape parameter only applies in Salesforce Classic."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "addError",
      "signature": "public Void addError(Exception exceptionError)",
      "description": "Marks a trigger record with a custom error message and prevents any DML operation from occurring.",
      "params": [
        {
          "name": "exceptionError",
          "datatype": "System.Exception",
          "description": "An Exception object or a custom exception object that contains the error message to mark the record with."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "addError",
      "signature": "public Void addError(Exception exceptionError, Boolean escape)",
      "description": "Marks a trigger record with a custom exception error message, specifies whether or not the exception error message should be escaped, and prevents any DML operation from occurring.",
      "params": [
        {
          "name": "escape",
          "datatype": "Boolean",
          "description": "An Exception object or a custom exception object that contains the error message to mark the record with.   Indicates whether any HTML markup in the custom error message should be escaped (true) or not (false). This parameter is ignored in Lightning Experience and the Salesforce app and the HTML is always escaped. The escape parameter only applies in Salesforce Classic."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "addError",
      "signature": "public Void addError(String errorMsg)",
      "description": "Places the specified error message on a trigger record field in the Salesforce user interface and prevents any DML operation from occurring.",
      "params": [
        {
          "name": "errorMsg",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "addError",
      "signature": "public Void addError(String errorMsg, Boolean escape)",
      "description": "Places the specified error message, which can be escaped or unescaped, on a trigger record field in the Salesforce user interface, and prevents any DML operation from occurring.",
      "params": [
        {
          "name": "escape",
          "datatype": "Boolean",
          "description": "The error message to mark the record with.   Indicates whether any HTML markup in the custom error message should be escaped (true) or not (false). This parameter is ignored in Lightning Experience and the Salesforce app and the HTML is always escaped. The escape parameter only applies in Salesforce Classic."
        }
      ],
      "datatype": ""
    },
    {
      "name": "clear",
      "signature": "public Void clear()",
      "description": "Clears all field values",
      "params": [],
      "datatype": "Void"
    },
    {
      "name": "clone",
      "signature": "public SObject clone(Boolean preserveId, Boolean isDeepClone, Boolean preserveReadonlyTimestamps, Boolean preserveAutonumber)",
      "description": "Creates a copy of the SObject record.",
      "params": [
        {
          "name": "preserveAutonumber",
          "datatype": "Boolean",
          "description": "(Optional) Determines whether the ID of the original object is preserved or cleared in the duplicate. If set to true, the ID is copied to the duplicate. The default is false, that is, the ID is cleared. (Optional) Determines whether the method creates a full copy of the SObject field or just a reference: If set to true, the method creates a full copy of the SObject. All fields on the SObject are duplicated in memory, including relationship fields. Consequently, if you make changes to a field on the cloned SObject, the original SObject is not affected.  If set to false, the method performs a shallow copy of the SObject fields. All copied relationship fields reference the original SObjects. Consequently, if you make changes to a relationship field on the cloned SObject, the corresponding field on the original SObject is also affected, and vice versa. The default is false.    (Optional) Determines whether the read-only timestamp fields are preserved or cleared in the duplicate. If set to true, the read-only fields CreatedById, CreatedDate, LastModifiedById, and LastModifiedDate are copied to the duplicate. The default is false, that is, the values are cleared. (Optional) Determines whether auto number fields of the original object are preserved or cleared in the duplicate. If set to true, auto number fields are copied to the cloned object. The default is false, that is, auto number fields are cleared."
        }
      ],
      "datatype": "SObject (of same type)"
    },
    {
      "name": "get",
      "signature": "public Object get(String fieldName)",
      "description": "Returns the value for the field specified by fieldName, such as AccountNumber.",
      "params": [
        {
          "name": "fieldName",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Object"
    },
    {
      "name": "get",
      "signature": "public Object get(Schema.sObjectField field)",
      "description": "Returns the value for the field specified by the field token Schema.sObjectField, such as, Schema.Account.AccountNumber.",
      "params": [
        {
          "name": "field",
          "datatype": "Schema.SObjectField",
          "description": ""
        }
      ],
      "datatype": "Object"
    },
    {
      "name": "getCloneSourceId",
      "signature": "public Id getCloneSourceId()",
      "description": "Returns the ID of the entity from which an object was cloned. You can use it for objects cloned through the Salesforce user interface. If you donâ€™t use a preserveId parameter, of if you use a preserveId value of false, you can also used it  for objects created using the System.SObject.clone(preserveId, isDeepClone, preserveReadonlyTimestamps, preserveAutonumber) method.",
      "params": [],
      "datatype": "Id"
    },
    {
      "name": "getOptions",
      "signature": "public Database.DMLOptions getOptions()",
      "description": "Returns the database.DMLOptions object for the SObject.",
      "params": [],
      "datatype": "Database.DMLOptions"
    },
    {
      "name": "getPopulatedFieldsAsMap",
      "signature": "public Map<String,Object> getPopulatedFieldsAsMap()",
      "description": "Returns a map of populated field names and their corresponding values. The map contains only the fields that have been populated in memory for the SObject instance.",
      "params": [],
      "datatype": "Map<String,Object>"
    },
    {
      "name": "getSObject",
      "signature": "public SObject getSObject(String fieldName)",
      "description": "Returns the value for the specified field. This method is primarily used with dynamic DML to access values for external IDs.",
      "params": [
        {
          "name": "fieldName",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "SObject"
    },
    {
      "name": "getSObject",
      "signature": "public SObject getSObject(Schema.SObjectField fieldName)",
      "description": "Returns the value for the field specified by the field token Schema.fieldName, such as, Schema.MyObj.MyExternalId. This method is primarily used with dynamic DML to access values for external IDs.",
      "params": [
        {
          "name": "fieldName",
          "datatype": "Schema.SObjectField",
          "description": ""
        }
      ],
      "datatype": "SObject"
    },
    {
      "name": "getSObjects",
      "signature": "public SObject[] getSObjects(String fieldName)",
      "description": "Returns the values for the specified field. This method is primarily used with dynamic DML to access values  for associated objects, such as child relationships.",
      "params": [
        {
          "name": "fieldName",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "SObject[]"
    },
    {
      "name": "getSObjects",
      "signature": "public SObject[] getSObjects(Schema.SObjectType fieldName)",
      "description": "Returns the value for the field specified by the field token Schema.fieldName, such as, Schema.Account.Contact. This method is primarily used with dynamic DML to access values for associated objects, such as child relationships.",
      "params": [
        {
          "name": "fieldName",
          "datatype": "Schema.SObjectType",
          "description": ""
        }
      ],
      "datatype": "SObject[]"
    },
    {
      "name": "getSObjectType",
      "signature": "public Schema.SObjectType getSObjectType()",
      "description": "Returns the token for this SObject. This method is primarily used with describe information.",
      "params": [],
      "datatype": "Schema.SObjectType"
    },
    {
      "name": "getQuickActionName",
      "signature": "public String getQuickActionName()",
      "description": "Retrieves the name of a quick action associated with this SObject. Typically used in triggers.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "isClone",
      "signature": "public Boolean isClone()",
      "description": "Returns true if an entity is cloned from something, even if the entity hasnâ€™t been saved.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isSet",
      "signature": "public Void isSet(String fieldName)",
      "description": "Returns information about the queried sObject field. Returns true if the sObject field is populated, either by direct assignment or by inclusion in a SOQL query. Returns false if the sObject field is not set. If an invalid field is specified, an SObjectException is thrown.",
      "params": [
        {
          "name": "fieldName",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "isSet",
      "signature": "public Void isSet(Schema.SObjectField field)",
      "description": "Returns information about the queried sObject field. Returns true if the sObject field is populated, either by direct assignment or by inclusion in a SOQL query. Returns false if the sObject field is not set. If an invalid field is specified, an SObjectException is thrown.",
      "params": [
        {
          "name": "field",
          "datatype": "SObjectField Class",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "put",
      "signature": "public Object put(String fieldName, Object value)",
      "description": "Sets the value for the specified field and returns the previous value for the field.",
      "params": [
        {
          "name": "value",
          "datatype": "Object",
          "description": ""
        }
      ],
      "datatype": "Object"
    },
    {
      "name": "put",
      "signature": "public Object put(Schema.SObjectField fieldName, Object value)",
      "description": "Sets the value for the field specified by the field token Schema.sObjectField, such as, Schema.Account.AccountNumber and returns the previous value for the field.",
      "params": [
        {
          "name": "value",
          "datatype": "Object",
          "description": ""
        }
      ],
      "datatype": "Object"
    },
    {
      "name": "putSObject",
      "signature": "public SObject putSObject(String fieldName, SObject value)",
      "description": "Sets the value for the specified field. This method is primarily used with dynamic DML for setting external IDs. The method returns the previous value of the field.",
      "params": [
        {
          "name": "value",
          "datatype": "SObject",
          "description": ""
        }
      ],
      "datatype": "SObject"
    },
    {
      "name": "putSObject",
      "signature": "public SObject putSObject(Schema.SObjectType fieldName, SObject value)",
      "description": "Sets the value for the field specified by the token Schema.SObjectType. This method is primarily used with dynamic DML for setting external IDs. The method returns the previous value of the field.",
      "params": [
        {
          "name": "value",
          "datatype": "SObject",
          "description": ""
        }
      ],
      "datatype": "SObject"
    },
    {
      "name": "recalculateFormulas",
      "signature": "public Void recalculateFormulas()",
      "description": "Recalculates all formula fields on an SObject, and sets updated field values. Rather than inserting or updating objects each time you want to test changes to your formula logic, call this method and inspect your new field values. Then make further logic changes as needed.",
      "params": [],
      "datatype": "Void"
    },
    {
      "name": "setOptions",
      "signature": "public Void setOptions(database.DMLOptions DMLOptions)",
      "description": "Sets the DMLOptions object for the SObject.",
      "params": [
        {
          "name": "DMLOptions",
          "datatype": "Database.DMLOptions",
          "description": ""
        }
      ],
      "datatype": "Void"
    }
  ],
  "description": "Contains methods for the sObject data type.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_sobject.htm"
}