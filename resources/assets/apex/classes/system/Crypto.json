{
  "name": "Crypto",
  "namespace": "System",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "decrypt",
      "signature": "public static Blob decrypt(String algorithmName, Blob privateKey, Blob initializationVector, Blob cipherText)",
      "description": "Decrypts the Blob cipherText using the specified algorithm, private key, and initialization vector. Use this method to decrypt blobs encrypted using a third party application or the encrypt method.",
      "params": [
        {
          "name": "cipherText",
          "datatype": "Blob",
          "description": ""
        }
      ],
      "datatype": "Blob"
    },
    {
      "name": "decryptWithManagedIV",
      "signature": "public static Blob decryptWithManagedIV(String algorithmName, Blob privateKey, Blob IVAndCipherText)",
      "description": "Decrypts the Blob IVAndCipherText using the specified algorithm and private key. Use this method to decrypt blobs encrypted using a third party application or the encryptWithManagedIV method.",
      "params": [
        {
          "name": "IVAndCipherText",
          "datatype": "Blob",
          "description": "The first 128 bits (16 bytes) of IVAndCipherText must contain the initialization vector."
        }
      ],
      "datatype": "Blob"
    },
    {
      "name": "encrypt",
      "signature": "public static Blob encrypt(String algorithmName, Blob privateKey, Blob initializationVector, Blob clearText)",
      "description": "Encrypts the Blob clearText using the specified algorithm, private key and initialization vector. Use this method when you want to specify your own initialization vector.",
      "params": [
        {
          "name": "clearText",
          "datatype": "Blob",
          "description": ""
        }
      ],
      "datatype": "Blob"
    },
    {
      "name": "encryptWithManagedIV",
      "signature": "public static Blob encryptWithManagedIV(String algorithmName, Blob privateKey, Blob clearText)",
      "description": "Encrypts the Blob clearText using the specified algorithm and private key. Use this method when you want Salesforce to generate the initialization vector for you.",
      "params": [
        {
          "name": "clearText",
          "datatype": "Blob",
          "description": ""
        }
      ],
      "datatype": "Blob"
    },
    {
      "name": "generateAesKey",
      "signature": "",
      "description": "Generates an Advanced Encryption Standard (AES) key.",
      "params": [],
      "datatype": "Blob"
    },
    {
      "name": "generateDigest",
      "signature": "public static Blob generateDigest(String algorithmName, Blob input)",
      "description": "Computes a secure, one-way hash digest based on the supplied input string and algorithm name.",
      "params": [
        {
          "name": "input",
          "datatype": "Blob",
          "description": "Valid values for algorithmName are: MD5  SHA1  SHA-256  SHA-512"
        }
      ],
      "datatype": "Blob"
    },
    {
      "name": "generateMac",
      "signature": "public static Blob generateMac(String algorithmName, Blob input, Blob privateKey)",
      "description": "Computes a message authentication code (MAC) for the input string, using the private key and the specified algorithm.",
      "params": [
        {
          "name": "privateKey",
          "datatype": "Blob",
          "description": "The valid values for algorithmName are: hmacMD5  hmacSHA1  hmacSHA256  hmacSHA512    The value of privateKey does not need to be in decoded form.  The value cannot exceed 4 KB."
        }
      ],
      "datatype": "Blob"
    },
    {
      "name": "getRandomInteger",
      "signature": "public static Integer getRandomInteger()",
      "description": "Returns a random Integer.",
      "params": [],
      "datatype": "Integer"
    },
    {
      "name": "getRandomLong",
      "signature": "public static Long getRandomLong()",
      "description": "Returns a random Long.",
      "params": [],
      "datatype": "Long"
    },
    {
      "name": "sign",
      "signature": "public static Blob sign(String algorithmName, Blob input, Blob privateKey)",
      "description": "Computes a unique digital signature for the input string, using the specified algorithm and the supplied private key.",
      "params": [
        {
          "name": "privateKey",
          "datatype": "Blob",
          "description": "The algorithm name. The valid values for algorithmName are RSA-SHA1, RSA-SHA256, or RSA.RSA-SHA1 is an RSA signature (with an asymmetric key pair) of a SHA1 hash. RSA-SHA256 is an RSA signature of a SHA256 hash. RSA is the same as RSA-SHA1.  The data to sign. The value of privateKey must be decoded using the EncodingUtilbase64Decode method, and should be in RSA's PKCS #8 (1.2) Private-Key Information Syntax Standard form. The value cannot exceed 4 KB."
        }
      ],
      "datatype": "Blob"
    },
    {
      "name": "signWithCertificate",
      "signature": "public static Blob signWithCertificate(String algorithmName, Blob input, String certDevName)",
      "description": "Computes a unique digital signature for the input string, using the specified algorithm and the supplied certificate and key pair.",
      "params": [
        {
          "name": "certDevName",
          "datatype": "String",
          "description": "The algorithm name. The valid values for algorithmName are RSA-SHA1, RSA-SHA256, or RSA.RSA-SHA1 is an RSA signature (with an asymmetric key pair) of a SHA1 hash. RSA-SHA256 is an RSA signature of a SHA256 hash. RSA is the same as RSA-SHA1.  The data to sign. The Unique Name for a certificate stored in the Salesforce organization’s Certificate and Key Management page to use for signing.To access the Certificate and Key Management page from Setup, enter Certificate and Key Management in the Quick Find box, then select Certificate and Key Management."
        }
      ],
      "datatype": "Blob"
    },
    {
      "name": "signXML",
      "signature": "public Void signXML(String algorithmName, Dom.XmlNode node, String idAttributeName, String certDevName)",
      "description": "Envelops the signature into an XML document.",
      "params": [
        {
          "name": "certDevName",
          "datatype": "String",
          "description": "The algorithm name. Valid names are RSA-SHA1, RSA-SHA256, or RSA. RSA-SHA1 is an RSA signature (with an asymmetric key pair) of an SHA1 hash. RSA-SHA256 is an RSA signature of an SHA256 hash. RSA is the same as RSA-SHA1.  The XML node to sign and insert the signature into. The full name (including the namespace) of the attribute on the node (XmlNode) to use as the reference ID. If null, this method uses the ID attribute on the node. If there is no ID attribute, Salesforce generates a new ID and adds it to the node. The unique name for a certificate stored in the Salesforce org’s Certificate and Key Management page to use for signing.To access the Certificate and Key Management page from Setup, enter Certificate and Key Management in the Quick Find box, then select Certificate and Key Management."
        }
      ],
      "datatype": "void"
    },
    {
      "name": "signXML",
      "signature": "public static void signXml(String algorithmName, Dom.XmlNode node, String idAttributeName, String certDevName, Dom.XmlNode refChild)",
      "description": "Inserts the signature envelope before the specified child node.",
      "params": [
        {
          "name": "refChild",
          "datatype": "String",
          "description": "The RSA encryption algorithm name. Valid names are RSA-SHA1, RSA-SHA256, or RSA. RSA-SHA1 is an RSA signature (with an asymmetric key pair) of an SHA1 hash. RSA-SHA256 is an RSA signature of an SHA256 hash. RSA is the same as RSA-SHA1.  The XML node to sign and insert the signature into. The full name (including the namespace) of the attribute on the node (XmlNode) to use as the reference ID. If null, this method uses the ID attribute on the node. If there is no ID attribute, Salesforce generates a new ID and adds it to the node. The unique name for a certificate stored in the Salesforce org’s Certificate and Key Management page to use for signing.To access the Certificate and Key Management page from Setup, enter Certificate and Key Management in the Quick Find box, then select Certificate and Key Management.  Dom.XmlNode The XML node before which to insert the signature. If refChild is null, the signature is added at the end."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "",
      "signature": "public static Blob verify(String algorithmName, Blob data, Blob signature, Blob publicKey)",
      "description": "Verifies the digital signature for the Blob data using the specified algorithm and the supplied public key. Use this method to verify a Blob signed by a digital signature created using a third-party application or the sign method.",
      "params": [
        {
          "name": "publicKey",
          "datatype": "Blob",
          "description": "The algorithm name. The valid values for algorithmName are RSA-SHA1, RSA-SHA256, or RSA.RSA-SHA1 is an RSA signature (with an asymmetric key pair) of an SHA1 hash. RSA-SHA256 is an RSA signature of an SHA256 hash. RSA is the same as RSA-SHA1.  The data to sign. Blob The RSA signature. The value of publicKey must be decoded using the EncodingUtilbase64Decode method, and be in X.509 standard."
        }
      ],
      "datatype": "Blob"
    },
    {
      "name": "",
      "signature": "public static Blob verify(String algorithmName, Blob data, Blob signature, String certDevName)",
      "description": "Verifies the digital signature for the Blob data using the specified algorithm and the public key associated with the certDevName. Use this method to verify a Blob signed by a digital signature created using a third-party application or the sign method.",
      "params": [
        {
          "name": "certDevName",
          "datatype": "String",
          "description": "The algorithm name. The valid values for algorithmName are RSA-SHA1, RSA-SHA256, or RSA.RSA-SHA1 is an RSA signature (with an asymmetric key pair) of an SHA1 hash. RSA-SHA256 is an RSA signature of an SHA256 hash. RSA is the same as RSA-SHA1.  The data to sign. Blob The RSA signature. The Unique Name for a certificate stored in the Salesforce organization’s Certificate and Key Management page to use for signing.To access the Certificate and Key Management page from Setup, enter Certificate and Key Management in the Quick Find box, then select Certificate and Key Management."
        }
      ],
      "datatype": "Blob"
    },
    {
      "name": "",
      "signature": "public static Blob verifyHMac(String algorithmName, Blob input, Blob privateKey, Blob macToVerify)",
      "description": "Verifies the HMAC signature for Blob data using the specified algorithm, input data, privateKey, and the mac. Use this method to verify a Blob signed by a digital signature created using a third-party application or the sign method.",
      "params": [
        {
          "name": "hmacToVerify",
          "datatype": "Blob",
          "description": "The valid values for algorithmName are: hmacMD5  hmacSHA1  hmacSHA256  hmacSHA512    The data to sign. The value of privateKey does not need to be in decoded form. The value cannot exceed 4 KB.  The value of the mac must be verified against the provided privateKey, data, and algorithm."
        }
      ],
      "datatype": "Boolean"
    }
  ],
  "description": "Provides methods for creating digests, message authentication codes, and signatures, as well as encrypting and decrypting information.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_restful_crypto.htm"
}