{
  "name": "Messaging",
  "namespace": "System",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "extractInboundEmail",
      "signature": "public static Messaging.InboundEmail extractInboundEmail(Object source, Boolean includeForwardedAttachments)",
      "description": "Use this method in your email service code to control how to parse and process forwarded or attached emails. Returns an instance of Messaging.InboundEmail from a stream of data that is in RFC822 format. The data stream can be a forwarded email in an attachment to an existing InboundEmail, or a stream from another source.",
      "params": [
        {
          "name": "includeForwardedAttachments",
          "datatype": "Boolean",
          "description": "An instance of Messaging.InboundEmail.BinaryAttachment whose MimeTypeSubtype is message/rfc822 or a Blob. If source is a Blob, then supply a byte array in RFC822 format. This parameter controls how attachments to embedded or forwarded emails are handled. Set to true to provide all attachments, even attachments in embedded emails in the binaryAttachments and textAttachments properties of the returned value. Set to false to provide only the attachments that are at the top level of the source email."
        }
      ],
      "datatype": "Messaging.InboundEmail"
    },
    {
      "name": "reserveMassEmailCapacity",
      "signature": "public Void reserveMassEmailCapacity(Integer amountReserved)",
      "description": "Reserves email capacity to send mass email to the specified number of email addresses, after the current transaction commits.",
      "params": [
        {
          "name": "amountReserved",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "reserveSingleEmailCapacity",
      "signature": "public Void reserveSingleEmailCapacity(Integer amountReserved)",
      "description": "Reserves email capacity to send single email to the specified number of email addresses, after the current transaction commits.",
      "params": [
        {
          "name": "amountReserved",
          "datatype": "Integer",
          "description": ""
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "sendEmail",
      "signature": "public Messaging.SendEmailResult[] sendEmail(Messaging.Email[] emails, Boolean allOrNothing)",
      "description": "Sends the list of up to 10 emails instantiated with either SingleEmailMessage or MassEmailMessage and returns a list of SendEmailResult objects. When org preferences are set to save EmailMessage objects and a trigger is defined for EmailMessage objects, the trigger is fired for each SingleEmailMessage individually.",
      "params": [
        {
          "name": "allOrNothing",
          "datatype": "Boolean",
          "description": "The optional opt_allOrNone parameter specifies whether sendEmail prevents delivery of all other messages when any of the messages fail due to an error (true), or whether it allows delivery of the messages that don't have errors (false). The default is true."
        }
      ],
      "datatype": "Messaging.SendEmailResult[]"
    },
    {
      "name": "sendEmailMessage",
      "signature": "public Messaging.SendEmailResult[] sendEmailMessage(List<ID> emailMessageIds, Boolean allOrNothing)",
      "description": "Sends up to 10 draft email messages as defined by the specified email message IDs and returns a list of SendEmailResult objects.",
      "params": [
        {
          "name": "allOrNothing",
          "datatype": "Boolean",
          "description": ""
        }
      ],
      "datatype": "Messaging.SendEmailResult[]"
    },
    {
      "name": "renderEmailTemplate",
      "signature": "public static List<Messaging.RenderEmailTemplateBodyResult> renderEmailTemplate(String whoId, String whatId, List<String> bodies)",
      "description": "Replaces merge fields in text bodies of email templates with values from Salesforce records. Returns an array of RenderEmailTemplateBodyResult objects, each of which corresponds to an element in the supplied array of text bodies. Each RenderEmailTemplateBodyResult provides a success or failure indication, along with either an error code or the rendered text.",
      "params": [
        {
          "name": "bodies",
          "datatype": "List<String>",
          "description": "The identifier of an object in the database, typically a contact, lead, or user. The database record for that object is read and used in merge field processing. Identifies an object in the database like an account or opportunity. The record for that object is read and used in merge field processing. An array of strings that are examined for merge field references. The corresponding data from the object referenced by the whoId or whatId replaces the merge field reference."
        }
      ],
      "datatype": "List<Messaging.RenderEmailTemplateBodyResult>"
    },
    {
      "name": "renderStoredEmailTemplate",
      "signature": "public static Messaging.SingleEmailMessage renderStoredEmailTemplate(String templateId, String whoId, String whatId)",
      "description": "Renders a text, custom, HTML, or Visualforce email template that exists in the database into an instance of Messaging.SingleEmailMessage. Includes all attachment content in the returned email message.",
      "params": [
        {
          "name": "whatId",
          "datatype": "String",
          "description": "An email template that exists in the database, such as text, HTML, custom, and Visualforce templates. The identifier of an object in the database, typically a contact, lead, or user. The database record for that object is read and used in merge field processing. Identifies an object in the database, like an account or opportunity. The record for that object is read and used in merge field processing."
        }
      ],
      "datatype": "Messaging.SingleEmailMessage"
    },
    {
      "name": "renderStoredEmailTemplate",
      "signature": "public static Messaging.SingleEmailMessage renderStoredEmailTemplate(String templateId, String whoId, String whatId, Messaging.AttachmentRetrievalOption attachmentRetrievalOption)",
      "description": "Renders a text, custom, HTML, or Visualforce email template that exists in the database into an instance of Messaging.SingleEmailMessage. Provides options for including attachment metadata only, attachment metadata and content, or excluding attachments.",
      "params": [
        {
          "name": "attachmentRetrievalOption",
          "datatype": "Messaging.AttachmentRetrievalOption",
          "description": "An email template that exists in the database, such as text, HTML, custom, and Visualforce templates. The identifier of an object in the database, typically a contact, lead, or user. The database record for that object is read and used in merge field processing. Identifies an object in the database, like an account or opportunity. The record for that object is read and used in merge field processing. Specifies options for including attachments in the fileAttachments property of the returned Messaging.SingleEmailMessage. Set to one of the Messaging.AttachmentRetrievalOption values to include attachment metadata only, attachment metadata and content, or to exclude attachments.    Note When the attachmentRetrievalOption parameter is not set to NONE, the entityAttachments property of Messaging.SingleEmailMessage contains the ID of the Salesforce content objects to attach (ContentVersion or Document). The fileAttachments property contains the IDs of attachments, in addition to all the IDs in the entityAttachments property. As a result, the ID values in entityAttachments are duplicates of the IDs in the fileAttachments property. If you call renderStoredEmailTemplate() by passing the METADATA_WITH_BODY option, and send the rendered email message, the email will contain duplicate attachments. Before using the returned email message with sendEmail(emails, allOrNothing), you can remove attachments from fileAttachments that are duplicated in entityAttachments."
        }
      ],
      "datatype": "Messaging.SingleEmailMessage"
    },
    {
      "name": "renderStoredEmailTemplate",
      "signature": "public static Messaging.SingleEmailMessage renderStoredEmailTemplate(String templateId, String whoId, String whatId, Messaging.AttachmentRetrievalOption attachmentRetrievalOption, Boolean updateEmailTemplateUsage)",
      "description": "Renders a text, custom, HTML, or Visualforce email template that exists in the database into an instance of Messaging.SingleEmailMessage. Provides options for including attachment metadata only, attachment metadata and content, or excluding attachments.",
      "params": [
        {
          "name": "updateEmailTemplateUsage",
          "datatype": "Boolean",
          "description": "An email template that exists in the database, such as text, HTML, custom, and Visualforce templates. The identifier of an object in the database, typically a contact, lead, or user. The database record for that object is read and used in merge field processing. Identifies an object in the database, like an account or opportunity. The record for that object is read and used in merge field processing. Specifies options for including attachments in the fileAttachments property of the returned Messaging.SingleEmailMessage. Set to one of the Messaging.AttachmentRetrievalOption values to include attachment metadata only, attachment metadata and content, or to exclude attachments.    Note When the attachmentRetrievalOption parameter is not set to NONE, the entityAttachments property of Messaging.SingleEmailMessage contains the ID of the Salesforce content objects to attach (ContentVersion or Document). The fileAttachments property contains the IDs of attachments, in addition to all the IDs in the entityAttachments property. As a result, the ID values in entityAttachments are duplicates of the IDs in the fileAttachments property. If you call renderStoredEmailTemplate() by passing the METADATA_WITH_BODY option, and send the rendered email message, the email will contain duplicate attachments. Before using the returned email message with sendEmail(emails, allOrNothing), you can remove attachments from fileAttachments that are duplicated in entityAttachments.     Specifies whether the usage field in the EmailTemplate record is updated upon successful rendering."
        }
      ],
      "datatype": "Messaging.SingleEmailMessage"
    }
  ],
  "description": "Contains messaging methods used when sending a single or mass email.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_email_outbound_messaging.htm"
}