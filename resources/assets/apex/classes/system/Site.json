{
  "name": "Site",
  "namespace": "System",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "changePassword",
      "signature": "public static System.PageReference changePassword(String newPassword, String verifyNewPassword, String oldPassword)",
      "description": "Changes the password of the current user.",
      "params": [
        {
          "name": "oldPassword",
          "datatype": "String",
          "description": "Optional only if the current user’s password has expired; otherwise, required."
        }
      ],
      "datatype": "System.PageReference"
    },
    {
      "name": "createExternalUser",
      "signature": "public static Id createExternalUser(SObject user, String accountId)",
      "description": "Creates a community or a portal user for the given account and associates it with the community.",
      "params": [
        {
          "name": "accountId",
          "datatype": "String",
          "description": "Information required to create a user.The email address of the user is used to look for matching contacts associated with the specified accountId. If a matching contact is found and is already used by an external user, self-registration isn’t successful. If a matching contact is found but isn’t used by an external user, it is used for the new external user. If there is no matching contact, a new contact is created for the new external user.  The ID of the account you want to associate the user with."
        }
      ],
      "datatype": "Id"
    },
    {
      "name": "createExternalUser",
      "signature": "public static Id createExternalUser(SObject user, String accountId, String password)",
      "description": "Creates a community or a portal user for the given account and associates it with the community. This method sends an email with the specified password to the user.",
      "params": [
        {
          "name": "password",
          "datatype": "String",
          "description": "Information required to create a user.The email address of the user is used to look for matching contacts associated with the specified accountId. If a matching contact is found and is already used by an external user, self-registration isn’t successful. If a matching contact is found but isn’t used by an external user, it is used for the new external user. If there is no matching contact, a new contact is created for the new external user.  The ID of the account you want to associate the user with. The password of the community or portal user. If not specified, or if set to null or an empty string, this method sends a new password email to the portal user."
        }
      ],
      "datatype": "Id"
    },
    {
      "name": "createExternalUser",
      "signature": "public static Id createExternalUser(SObject user, String accountId, String password, Boolean sendEmailConfirmation)",
      "description": "Creates a community or portal user and associates it with the given account. This method sends the user an email with the specified password and a new user confirmation email.",
      "params": [
        {
          "name": "sendEmailConfirmation",
          "datatype": "Boolean",
          "description": "Determines whether a new user email is sent to the portal user. Set it to true to send a new user email to the portal user. The default is false, that is, the new user email isn't sent."
        }
      ],
      "datatype": "Id"
    },
    {
      "name": "createPersonAccountPortalUser",
      "signature": "public static ID createPersonAccountPortalUser(sObject user, String ownerId, String password)",
      "description": "Creates a person account using the default record type defined on the guest user's profile, then enables it for the site's portal.",
      "params": [
        {
          "name": "password",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "ID"
    },
    {
      "name": "createPersonAccountPortalUser",
      "signature": "public static ID createPersonAccountPortalUser(sObject user, String ownerId, String recordTypeId, String password)",
      "description": "Creates a person account using the specified recordTypeID, then enables it for the site's portal.",
      "params": [
        {
          "name": "password",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "ID"
    },
    {
      "name": "createPortalUser",
      "signature": "public static ID createPortalUser(sObject user, String accountId, String password, Boolean sendEmailConfirmation)",
      "description": "Creates a portal user for the given account and associates it with the site's portal.",
      "params": [
        {
          "name": "sendEmailConfirmation",
          "datatype": "Boolean",
          "description": "(Optional) The password of the portal user. If not specified, or if set to null or an empty string, this method sends a new password email to the portal user. (Optional) Determines whether a new user email is sent to the portal user. Set it to true to send a new user email to the portal user. The default is false, that is, the new user email isn't sent."
        }
      ],
      "datatype": "ID"
    },
    {
      "name": "forgotPassword",
      "signature": "public static Boolean forgotPassword(String username,String emailTemplateName)",
      "description": "Resets the user's password and sends an email to the user with the user’s new password. You can specify a custom email template or use the default email template. Returns a value indicating whether the password reset was successful.",
      "params": [
        {
          "name": "emailTemplateName",
          "datatype": "String",
          "description": "If provided, the method applies the template to the email. Otherwise, the method applies the default system template. If an email template that doesn’t exist is provided, the system logs an exception."
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "forgotPassword",
      "signature": "public static Boolean forgotPassword(String username)",
      "description": "Resets the user's password and sends an email to the user with the user’s new password. Returns a value indicating whether the password reset was successful.",
      "params": [
        {
          "name": "username",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "getAdminEmail",
      "signature": "public static String getAdminEmail()",
      "description": "Returns the email address of the site administrator.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getAdminId",
      "signature": "public static ID getAdminId()",
      "description": "Returns the user ID of the site administrator.",
      "params": [],
      "datatype": "ID"
    },
    {
      "name": "getAnalyticsTrackingCode",
      "signature": "public static String getAnalyticsTrackingCode()",
      "description": "The tracking code associated with your site. This code can be used by services like Google Analytics to track page request data for your site.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getCurrentSiteUrl",
      "signature": "Note that this may return the referring page's URL instead of the current request's URL. The returned value includes the path prefix and always ends with a / character. If the current request is not a site request, then this method returns null. If the current request is not a site request, then this method returns null. This method was replaced by getBaseUrl in API version 30.0.",
      "description": "Deprecated. This method was replaced by getBaseUrl() in API version 30.0. Returns the base URL of the current site that references and links should use.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getBaseCustomUrl",
      "signature": "public static String getBaseCustomUrl()",
      "description": "Returns a base URL for the current site that doesn’t use a force.com subdomain. The returned URL uses the same protocol (HTTP or HTTPS) as the current request if at least one non-Force.com custom URL that supports HTTPS exists on the site. The returned value never ends with a / character. If all the custom URLs in this site end in Force.com or this site has no custom URLs, then this returns an empty string. If the current request is not a site request, then this method returns an empty string. This method replaced getCustomWebAddress and includes the custom URL's path prefix..",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getBaseInsecureUrl",
      "signature": "public static String getBaseInsecureUrl()",
      "description": "Returns a base URL for the current site that uses HTTP instead of HTTPS. The current request's domain is used. The returned value includes the path prefix and never ends with a / character. If the current request is not a site request, then this method returns an empty string.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getBaseRequestUrl",
      "signature": "public static String getBaseRequestUrl()",
      "description": "Returns the base URL of the current site for the requested URL. This isn't influenced by the referring page's URL. The returned URL uses the same protocol (HTTP or HTTPS) as the current request. The returned value includes the path prefix and never ends with a / character. If the current request is not a site request, then this method returns an empty string.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getBaseSecureUrl",
      "signature": "public static String getBaseSecureUrl()",
      "description": "Returns a base URL for the current site that uses HTTPS instead of HTTP. The current request's domain is preferred if it supports HTTPS. Domains that are not Force.com subdomains are preferred over Force.com subdomains. A Force.com subdomain, if associated with the site, is used if no other HTTPS domains exist in the current site. If no HTTPS custom URLs exist in the site, then this method returns an empty string. The returned value includes the path prefix and never ends with a / character. If the current request is not a site request, then this method returns an empty string.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getBaseUrl",
      "signature": "public static String getBaseUrl()",
      "description": "Returns the base URL of the current site that references and links should use. Note that this field may return the referring page's URL instead of the current request's URL. The returned value includes the path prefix and never ends with a / character. If the current request is not a site request, then this field returns an empty string. This field replaces getCurrentSiteUrl.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getCustomWebAddress",
      "signature": "Returns the request's custom URL if it doesn't end in Lightning Platform or returns the site's primary custom URL. If neither exist, then this returns null. Note that the URL's path is always the root, even if the request's custom URL has a path prefix. If the current request is not a site request, then this method returns null. The returned value always ends with a / character.",
      "description": "Deprecated. This method was replaced by getBaseCustomUrl() in API version 30.0.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getDomain",
      "signature": "public static String getDomain()",
      "description": "Returns the Salesforce Site domain (force.com subdomain URL hostname) for your organization.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getErrorDescription",
      "signature": "public static String getErrorDescription()",
      "description": "Returns the error description for the current page if it’s a designated error page for the site and an error exists; otherwise, returns an empty string.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getErrorMessage",
      "signature": "public static String getErrorMessage()",
      "description": "Returns an error message for the current page if it’s a designated error page for the site and an error exists; otherwise, returns an empty string.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getExperienceId",
      "signature": "public static String getExperienceId()",
      "description": "Returns the value of the experience ID (expid). This expid value comes from a cookie in the user’s web browser.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getMasterLabel",
      "signature": "public static String getMasterLabel()",
      "description": "Returns the value of the Master Label field for the current site. If the current request is not a site request, then this field returns null.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getName",
      "signature": "public static String getName()",
      "description": "Returns the API name of the current site.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getOriginalUrl",
      "signature": "public static String getOriginalUrl()",
      "description": "Returns the original URL for this page if it’s a designated error page for the site; otherwise, returns null.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getPasswordPolicyStatement",
      "signature": "public static String getPasswordPolicyStatement()",
      "description": "Returns the password requirements for a community created with the Customer Service template.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getPathPrefix",
      "signature": "public static String getPathPrefix()",
      "description": "Returns the URL path prefix of the current site or an empty string if none. For example, if the requested site URL is http://myco.force.com/partners, then /partners is the path prefix. If the current request is not a site request, then this method returns an empty string. This method replaced getPrefix in API version 30.0.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getPrefix",
      "signature": "Returns the URL path prefix of the current site. For example, if your site URL is myco.force.com/partners, /partners is the path prefix. Returns null if the prefix isn’t defined.  If the current request is not a site request, then this method returns a null.",
      "description": "Deprecated. This method was replaced by getPathPrefix() in API version 30.0.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getSiteId",
      "signature": "public static String getSiteId()",
      "description": "Returns the ID of the current site. If the current request is not a site request, then this field returns null.",
      "params": [],
      "datatype": "Id"
    },
    {
      "name": "getTemplate",
      "signature": "public static System.PageReference getTemplate()",
      "description": "Returns the template name associated with the current site; returns the default template if no template has been designated.",
      "params": [],
      "datatype": "System.PageReference"
    },
    {
      "name": "getSiteType",
      "signature": "public static String getSiteType()",
      "description": "Returns the API value of the site type field for the current site. This can be Visualforce for a Salesforce site, Siteforce for a Site.com site, ChatterNetwork for a Communities site, or ChatterNetworkPicasso for a Site.com Communities site. If the current request is not a site request, then this method returns null.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "getSiteTypeLabel",
      "signature": "public static String getSiteTypeLabel()",
      "description": "Returns the value of the Site Type field's label for the current site. If the current request is not a site request, then this method returns null.",
      "params": [],
      "datatype": "String"
    },
    {
      "name": "isLoginEnabled",
      "signature": "public static Boolean isLoginEnabled()",
      "description": "Returns true if the current site is associated with an active login-enabled portal; otherwise returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isPasswordExpired",
      "signature": "public static Boolean isPasswordExpired()",
      "description": "For authenticated users, returns true if the currently logged-in user's password is expired. For non-authenticated users, returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isRegistrationEnabled",
      "signature": "public static Boolean isRegistrationEnabled()",
      "description": "Returns true if the current site is associated with an active self-registration-enabled Customer Portal; otherwise returns false.",
      "params": [],
      "datatype": "Boolean"
    },
    {
      "name": "isValidUsername",
      "signature": "public static Boolean isValidUsername(String username)",
      "description": "Returns true if the given username is valid; otherwise, returns false.",
      "params": [
        {
          "name": "username",
          "datatype": "String",
          "description": "The username to test for validity."
        }
      ],
      "datatype": "Boolean"
    },
    {
      "name": "login",
      "signature": "public static System.PageReference login(String username, String password, String startUrl)",
      "description": "Allows users to log in to the current site with the given username and password, then takes them to the startUrl. If startUrl is not a relative path, it defaults to the site's designated index page.",
      "params": [
        {
          "name": "startUrl",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "System.PageReference"
    },
    {
      "name": "passwordlessLogin",
      "signature": "public static System.PageReference passwordlessLogin(Id userId, List<Auth.VerificationMethod> methods, String startUrl)",
      "description": "Logs in a user to a community using an identity verification method, such as email or text, instead of a password. Passwordless login is a convenient, mobile-centric way to welcome users into your community. Let your community users log in with something other than their password, like their email address or phone number.",
      "params": [
        {
          "name": "startUrl",
          "datatype": "String",
          "description": "ID of the user to log in. List of identity verification methods available to the user for passwordless login. Path to the page that users see after they log in."
        }
      ],
      "datatype": "System.PageReference"
    },
    {
      "name": "setExperienceId",
      "signature": "public static void setExperienceId(String expIdValue)",
      "description": "Sets the experience ID for the current user. Use this method to populate the value of the experience ID (expid) cookie in the user’s web browser.",
      "params": [
        {
          "name": "expIdValue",
          "datatype": "String",
          "description": "A value that indicates the user’s login experience. The value must contain alphanumeric characters only, up to 30 characters."
        }
      ],
      "datatype": "void"
    },
    {
      "name": "setPortalUserAsAuthProvider",
      "signature": "public static Void setPortalUserAsAuthProvider(sObject user, String contactId)",
      "description": "Sets the specified user information within the site’s portal via an authentication provider.",
      "params": [
        {
          "name": "contactId",
          "datatype": "String",
          "description": ""
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "validatePassword",
      "signature": "public static void validatePassword(SObject user, String password, String confirmPassword)",
      "description": "Indicates whether a given password meets the requirements specified by org-wide or profile-based password policies in the current user’s org.",
      "params": [
        {
          "name": "confirmPassword",
          "datatype": "String",
          "description": "The user attempting to create a password during self-registration for a community. The password entered by the user. The password reentered by the user to confirm the password."
        }
      ],
      "datatype": "void"
    }
  ],
  "description": "Use the Site Class to manage your Lightning Platform sites.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_sites.htm"
}