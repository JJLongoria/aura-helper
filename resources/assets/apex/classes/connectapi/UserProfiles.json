{
  "name": "UserProfiles",
  "namespace": "ConnectApi",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "deleteBannerPhoto",
      "signature": "public static Void deleteBannerPhoto(String communityId, String userId)",
      "description": "Delete a user’s banner photo.",
      "params": [
        {
          "name": "userId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. ID of the user."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "deletePhoto",
      "signature": "public static Void deletePhoto(String communityId, String userId)",
      "description": "Delete a user’s photo.",
      "params": [
        {
          "name": "userId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. The ID for the context user or the keyword me."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "getBannerPhoto",
      "signature": "public static ConnectApi.BannerPhoto getBannerPhoto(String communityId, String userId)",
      "description": "Get a user’s banner photo.",
      "params": [
        {
          "name": "userId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. ID of the user."
        }
      ],
      "datatype": "ConnectApi.BannerPhoto"
    },
    {
      "name": "getPhoto",
      "signature": "public static ConnectApi.Photo getPhoto(String communityId, String userId)",
      "description": "Get a user’s photo.",
      "params": [
        {
          "name": "userId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. The ID for a user."
        }
      ],
      "datatype": "ConnectApi.Photo"
    },
    {
      "name": "getUserProfile",
      "signature": "public static ConnectApi.UserProfile getUserProfile(String communityId, String userId)",
      "description": "Get the user profile of the context user.",
      "params": [
        {
          "name": "userId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. The ID for a user."
        }
      ],
      "datatype": "ConnectApi.UserProfile"
    },
    {
      "name": "setBannerPhoto",
      "signature": "public static ConnectApi.BannerPhoto setBannerPhoto(String communityId, String userId, String fileId, Integer versionNumber)",
      "description": "Set an uploaded file as a user’s banner photo.",
      "params": [
        {
          "name": "versionNumber",
          "datatype": "Integer",
          "description": "Use either the ID for a community, internal, or null. ID of the user. ID of the uploaded file to use as the user banner. The key prefix must be 069, and the image must be smaller than 8 MB. Version number of the file. Specify an existing version number or, to get the latest version, specify null."
        }
      ],
      "datatype": "ConnectApi.BannerPhoto"
    },
    {
      "name": "setBannerPhoto",
      "signature": "public static ConnectApi.BannerPhoto setBannerPhoto(String communityId, String userId, ConnectApi.BinaryInput fileUpload)",
      "description": "Set a file that hasn’t been uploaded as a user’s banner photo.",
      "params": [
        {
          "name": "fileUpload",
          "datatype": "ConnectApi.Binary​​Input",
          "description": "Use either the ID for a community, internal, or null. ID of the user. A file to use as the photo. The content type must be usable as an image."
        }
      ],
      "datatype": "ConnectApi.BannerPhoto"
    },
    {
      "name": "setBannerPhotoWithAttributes",
      "signature": "public static ConnectApi.BannerPhoto setBannerPhotoWithAttributes(String communityId, String userId, ConnectApi.BannerPhotoInput bannerPhoto)",
      "description": "Set and crop an uploaded file as a user’s banner photo.",
      "params": [
        {
          "name": "bannerPhoto",
          "datatype": "ConnectApi.BannerPhotoInput",
          "description": "Use either the ID for a community, internal, or null. ID of the user. A ConnectApi.BannerPhotoInput object that specifies the ID and version of the file, and how to crop the file."
        }
      ],
      "datatype": "ConnectApi.BannerPhoto"
    },
    {
      "name": "setBannerPhotoWithAttributes",
      "signature": "public static ConnectApi.BannerPhoto setBannerPhotoWithAttributes(String communityId, String userId, ConnectApi.BannerPhotoInput bannerPhoto, ConnectApi.BinaryInput fileUpload)",
      "description": "Set and crop a file that hasn’t been uploaded as a user’s banner photo.",
      "params": [
        {
          "name": "fileUpload",
          "datatype": "ConnectApi.Binary​​Input",
          "description": "Use either the ID for a community, internal, or null. ID of the user. A ConnectApi.BannerPhotoInput object specifying the cropping parameters. A file to use as the photo. The content type must be usable as an image."
        }
      ],
      "datatype": "ConnectApi.BannerPhoto"
    },
    {
      "name": "setPhoto",
      "signature": "public static ConnectApi.Photo setPhoto(String communityId, String userId, String fileId, Integer versionNumber)",
      "description": "Set an uploaded file as a user’s photo.",
      "params": [
        {
          "name": "versionNumber",
          "datatype": "Integer",
          "description": "Use either the ID for a community, internal, or null. The ID for the context user or the keyword me. ID of an uploaded file. The file must be an image, and be smaller than 2 GB. Version number of the existing file. Specify either an existing version number, or null to get the latest version."
        }
      ],
      "datatype": "ConnectApi.Photo"
    },
    {
      "name": "setPhoto",
      "signature": "public static ConnectApi.Photo setPhoto(String communityId, String userId, ConnectApi.BinaryInput fileUpload)",
      "description": "Set a file that hasn’t been uploaded as a user’s photo.",
      "params": [
        {
          "name": "fileUpload",
          "datatype": "ConnectApi.Binary​​Input",
          "description": "Use either the ID for a community, internal, or null. The ID for the context user or the keyword me. A file to use as the photo. The content type must be usable as an image."
        }
      ],
      "datatype": "ConnectApi.Photo"
    },
    {
      "name": "setPhotoWithAttributes",
      "signature": "public static ConnectApi.Photo setPhotoWithAttributes(String communityId, String userId, ConnectApi.PhotoInput photo)",
      "description": "Set and crop an uploaded file as a user’s photo.",
      "params": [
        {
          "name": "photo",
          "datatype": "ConnectApi.PhotoInput",
          "description": "Use either the ID for a community, internal, or null. The ID for the context user or the keyword me. A ConnectApi.PhotoInput object specifying the file ID, version number, and cropping parameters."
        }
      ],
      "datatype": "ConnectApi.Photo"
    },
    {
      "name": "setPhotoWithAttributes",
      "signature": "public static ConnectApi.Photo setPhotoWithAttributes(String communityId, String userId, ConnectApi.PhotoInput photo, ConnectApi.BinaryInput fileUpload)",
      "description": "Set and crop a file that hasn’t been uploaded as a user’s photo.",
      "params": [
        {
          "name": "fileUpload",
          "datatype": "ConnectApi.Binary​​Input",
          "description": "Use either the ID for a community, internal, or null. The ID for the context user or the keyword me. A ConnectApi.PhotoInput object specifying the cropping parameters. A file to use as the photo. The content type must be usable as an image."
        }
      ],
      "datatype": "ConnectApi.Photo"
    }
  ],
  "description": "Access user profile data. The user profile data populates the profile page (also called the Chatter profile page). This data includes user information (such as address, manager, and phone number), some user capabilities (permissions), and a set of subtab apps, which are custom tabs on the profile page.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_ConnectAPI_UserProfiles_static_methods.htm"
}