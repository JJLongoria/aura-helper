{
  "name": "ContentHub",
  "namespace": "ConnectApi",
  "accessModifier": "global",
  "definitionModifier": "",
  "withSharing": false,
  "inheritedSharing": false,
  "isEnum": false,
  "enumValues": [],
  "extendsType": "",
  "isInterface": false,
  "implements": [],
  "classes": {},
  "enums": {},
  "fields": [],
  "constructors": [],
  "methods": [
    {
      "name": "addRepositoryItem",
      "signature": "public static ConnectApi.RepositoryFolderItem addRepositoryItem(String repositoryId, String repositoryFolderId, ConnectApi.ContentHubItemInput file)",
      "description": "Add a repository item.",
      "params": [
        {
          "name": "file",
          "datatype": "ConnectApi.ContentHubItemInput",
          "description": "The ID of the repository. The ID of the repository folder. The item type ID and fields of the item type."
        }
      ],
      "datatype": "ConnectApi.RepositoryFolderItem"
    },
    {
      "name": "addRepositoryItem",
      "signature": "public static ConnectApi.RepositoryFolderItem addRepositoryItem(String communityId, String repositoryId, String repositoryFolderId, ConnectApi.ContentHubItemInput file)",
      "description": "Add a repository item in a community.",
      "params": [
        {
          "name": "file",
          "datatype": "ConnectApi.ContentHubItemInput",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. The item type ID and fields of the item type."
        }
      ],
      "datatype": "ConnectApi.RepositoryFolderItem"
    },
    {
      "name": "addRepositoryItem",
      "signature": "public static ConnectApi.RepositoryFolderItem addRepositoryItem(String repositoryId, String repositoryFolderId, ConnectApi.ContentHubItemInput file, ConnectApi.BinaryInput fileData)",
      "description": "Add a repository item, including the binary file.",
      "params": [
        {
          "name": "fileData",
          "datatype": "ConnectApi.BinaryInput",
          "description": "The ID of the repository. The ID of the repository folder. The item type ID and fields of the item type. The binary file."
        }
      ],
      "datatype": "ConnectApi.RepositoryFolderItem"
    },
    {
      "name": "addRepositoryItem",
      "signature": "public static ConnectApi.RepositoryFolderItem addRepositoryItem(String communityId, String repositoryId, String repositoryFolderId, ConnectApi.ContentHubItemInput file, ConnectApi.BinaryInput fileData)",
      "description": "Add a repository item, including the binary file, in a community.",
      "params": [
        {
          "name": "fileData",
          "datatype": "ConnectApi.BinaryInput",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. The item type ID and fields of the item type. The binary file."
        }
      ],
      "datatype": "ConnectApi.RepositoryFolderItem"
    },
    {
      "name": "getAllowedItemTypes",
      "signature": "public static ConnectApi.ContentHubAllowedItemTypeCollection getAllowedItemTypes(String repositoryId, String repositoryFolderId)",
      "description": "Get the item types that the context user is allowed to create in the repository folder.",
      "params": [
        {
          "name": "repositoryFolderId",
          "datatype": "String",
          "description": "The ID of the repository. The ID of the repository folder."
        }
      ],
      "datatype": "ConnectApi.ContentHubAllowedItemTypeCollection"
    },
    {
      "name": "getAllowedItemTypes",
      "signature": "public static ConnectApi.ContentHubAllowedItemTypeCollection getAllowedItemTypes(String repositoryId, String repositoryFolderId, ConnectApi.ConnectContentHubItemType filter)",
      "description": "Get the item types, filtered by type, that the context user is allowed to create in the repository folder.",
      "params": [
        {
          "name": "filter",
          "datatype": "ConnectApi.ContentHubItemType",
          "description": "The ID of the repository. The ID of the repository folder. Item types. Values are:  Any—Includes files and folders.   FilesOnly—Includes files only.   FoldersOnly—Includes folders only."
        }
      ],
      "datatype": "ConnectApi.ContentHubAllowedItemTypeCollection"
    },
    {
      "name": "getAllowedItemTypes",
      "signature": "public static ConnectApi.ContentHubAllowedItemTypeCollection getAllowedItemTypes(String communityId, String repositoryId, String repositoryFolderId)",
      "description": "Get the item types that the context user is allowed to create in the repository folder in a community.",
      "params": [
        {
          "name": "repositoryFolderId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder."
        }
      ],
      "datatype": "ConnectApi.ContentHubAllowedItemTypeCollection"
    },
    {
      "name": "getAllowedItemTypes",
      "signature": "public static ConnectApi.ContentHubAllowedItemTypeCollection getAllowedItemTypes(String communityId, String repositoryId, String repositoryFolderId, ConnectApi.ConnectContentHubItemType filter)",
      "description": "Get the item types, filtered by type, that the context user is allowed to create in the repository folder in a community.",
      "params": [
        {
          "name": "filter",
          "datatype": "ConnectApi.ContentHubItemType",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. Item types. Values are:  Any—Includes files and folders.   FilesOnly—Includes files only.   FoldersOnly—Includes folders only."
        }
      ],
      "datatype": "ConnectApi.ContentHubAllowedItemTypeCollection"
    },
    {
      "name": "getFilePreview",
      "signature": "public static ConnectApi.FilePreview getFilePreview(String repositoryId, String repositoryFileId, ConnectApi.FilePreviewFormat formatType)",
      "description": "Get a repository file preview.",
      "params": [
        {
          "name": "formatType",
          "datatype": "ConnectApi.FilePreviewFormat",
          "description": "The ID of the repository. The ID of the repository file."
        }
      ],
      "datatype": "ConnectApi.FilePreview"
    },
    {
      "name": "getFilePreview",
      "signature": "public static ConnectApi.FilePreview getFilePreview(String repositoryId, String repositoryFileId, ConnectApi.FilePreviewFormat formatType, Integer startPageNumber, Integer endPageNumber)",
      "description": "Get a page or page range of a repository file preview.",
      "params": [
        {
          "name": "endPageNumber",
          "datatype": "Integer",
          "description": "The ID of the repository. The ID of the repository file. Specifies the format of the file preview. Values are:  Jpg—Preview format is JPG.   Pdf—Preview format is PDF.   Svg—Preview format is compressed SVG.   Thumbnail—Preview format is 240 x 180 PNG.   ThumbnailBig—Preview format is 720 x 480 PNG.   ThumbnailTiny—Preview format is 120 x 90 PNG.   PDF previews are available for files of type DOC, DOCX, PPT, PPTX, TEXT, XLS, and XLSX. SVG files are generated on demand.If you’re concerned that feature-rich SVG previews don’t work in your org, choose alternative file previews. To use JPG file previews, enter general in the Quick Find box in Setup. Select General Settings, and then select Display alternative file previews.  The starting page number in the range of file preview URLs. The ending page number in the range of file preview URLs."
        }
      ],
      "datatype": "ConnectApi.FilePreview"
    },
    {
      "name": "getFilePreview",
      "signature": "public static ConnectApi.FilePreview getFilePreview(String communityId, String repositoryId, String repositoryFileId, ConnectApi.FilePreviewFormat formatType)",
      "description": "Get a repository file preview in a community.",
      "params": [
        {
          "name": "formatType",
          "datatype": "ConnectApi.FilePreviewFormat",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. Specifies the format of the file preview. Values are:  Jpg—Preview format is JPG.   Pdf—Preview format is PDF.   Svg—Preview format is compressed SVG.   Thumbnail—Preview format is 240 x 180 PNG.   ThumbnailBig—Preview format is 720 x 480 PNG.   ThumbnailTiny—Preview format is 120 x 90 PNG.   PDF previews are available for files of type DOC, DOCX, PPT, PPTX, TEXT, XLS, and XLSX. SVG files are generated on demand.If you’re concerned that feature-rich SVG previews don’t work in your org, choose alternative file previews. To use JPG file previews, enter general in the Quick Find box in Setup. Select General Settings, and then select Display alternative file previews."
        }
      ],
      "datatype": "ConnectApi.FilePreview"
    },
    {
      "name": "getFilePreview",
      "signature": "public static ConnectApi.FilePreview getFilePreview(String communityId, String repositoryId, String repositoryFileId, ConnectApi.FilePreviewFormat formatType, Integer startPageNumber, Integer endPageNumber)",
      "description": "Get a page or page range of a repository file preview in a community.",
      "params": [
        {
          "name": "endPageNumber",
          "datatype": "Integer",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. Specifies the format of the file preview. Values are:  Jpg—Preview format is JPG.   Pdf—Preview format is PDF.   Svg—Preview format is compressed SVG.   Thumbnail—Preview format is 240 x 180 PNG.   ThumbnailBig—Preview format is 720 x 480 PNG.   ThumbnailTiny—Preview format is 120 x 90 PNG.   PDF previews are available for files of type DOC, DOCX, PPT, PPTX, TEXT, XLS, and XLSX. SVG files are generated on demand.If you’re concerned that feature-rich SVG previews don’t work in your org, choose alternative file previews. To use JPG file previews, enter general in the Quick Find box in Setup. Select General Settings, and then select Display alternative file previews.  The starting page number in the range of file preview URLs. The ending page number in the range of file preview URLs."
        }
      ],
      "datatype": "ConnectApi.FilePreview"
    },
    {
      "name": "getItemType",
      "signature": "public static ConnectApi.ContentHubItemTypeDetail getItemType(String repositoryId, String repositoryItemTypeId)",
      "description": "Get information about an item type associated with a repository.",
      "params": [
        {
          "name": "repositoryItemTypeId",
          "datatype": "String",
          "description": "The ID of the repository. The ID of the repository item type."
        }
      ],
      "datatype": "ConnectApi.ContentHubItemTypeDetail"
    },
    {
      "name": "getItemType",
      "signature": "public static ConnectApi.ContentHubItemTypeDetail getItemType(String communityId, String repositoryId, String repositoryItemTypeId)",
      "description": "Get information about an item type associated with a repository in a community.",
      "params": [
        {
          "name": "repositoryItemTypeId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository item type."
        }
      ],
      "datatype": "ConnectApi.ContentHubItemTypeDetail"
    },
    {
      "name": "getPreviews",
      "signature": "public static ConnectApi.FilePreviewCollection getPreviews(String repositoryId, String repositoryFileId)",
      "description": "Get information about a repository file’s supported previews.",
      "params": [
        {
          "name": "repositoryFileId",
          "datatype": "String",
          "description": "The ID of the repository. The ID of the repository file."
        }
      ],
      "datatype": "ConnectApi.FilePreviewCollection"
    },
    {
      "name": "getPreviews",
      "signature": "public static ConnectApi.FilePreviewCollection getPreviews(String communityId, String repositoryId, String repositoryFileId)",
      "description": "Get information about a repository file’s supported previews in a community.",
      "params": [
        {
          "name": "repositoryFileId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file."
        }
      ],
      "datatype": "ConnectApi.FilePreviewCollection"
    },
    {
      "name": "getRepositories",
      "signature": "public static ConnectApi.ContentHubRepositoryCollection getRepositories()",
      "description": "Get a list of repositories.",
      "params": [],
      "datatype": "ConnectApi.ContentHubRepositoryCollection"
    },
    {
      "name": "getRepositories",
      "signature": "public static ConnectApi.ContentHubRepositoryCollection getRepositories(String communityId)",
      "description": "Get a list of repositories in a community.",
      "params": [
        {
          "name": "communityId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null."
        }
      ],
      "datatype": "ConnectApi.ContentHubRepositoryCollection"
    },
    {
      "name": "getRepositories",
      "signature": "public static ConnectApi.ContentHubRepositoryCollection getRepositories(Integer pageParam, Integer pageSize)",
      "description": "Get a page of repositories.",
      "params": [
        {
          "name": "pageSize",
          "datatype": "Integer",
          "description": "Specifies the number of the page you want returned. Starts at 0. If you pass in null or 0, the first page is returned. Specifies the number of items per page. Valid values are from 1 through 100. If you pass in null, the default page size is 25."
        }
      ],
      "datatype": "ConnectApi.ContentHubRepositoryCollection"
    },
    {
      "name": "getRepositories",
      "signature": "public static ConnectApi.ContentHubRepositoryCollection getRepositories(String communityId, Integer pageParam, Integer pageSize)",
      "description": "Get a page of repositories in a community.",
      "params": [
        {
          "name": "pageSize",
          "datatype": "Integer",
          "description": "Use either the ID for a community, internal, or null. Specifies the number of the page you want returned. Starts at 0. If you pass in null or 0, the first page is returned. Specifies the number of items per page. Valid values are from 1 through 100. If you pass in null, the default page size is 25."
        }
      ],
      "datatype": "ConnectApi.ContentHubRepositoryCollection"
    },
    {
      "name": "getRepository",
      "signature": "public static ConnectApi.ContentHubRepository getRepository(String repositoryId)",
      "description": "Get a repository.",
      "params": [
        {
          "name": "repositoryId",
          "datatype": "String",
          "description": "The ID of the repository."
        }
      ],
      "datatype": "ConnectApi.ContentHubRepository"
    },
    {
      "name": "getRepository",
      "signature": "public static ConnectApi.ContentHubRepository getRepository(String communityId, String repositoryId)",
      "description": "Get a repository in a community.",
      "params": [
        {
          "name": "repositoryId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository."
        }
      ],
      "datatype": "ConnectApi.ContentHubRepository"
    },
    {
      "name": "getRepositoryFile",
      "signature": "public static ConnectApi.RepositoryFileDetail getRepositoryFile(String repositoryId, String repositoryFileId)",
      "description": "Get a repository file.",
      "params": [
        {
          "name": "repositoryFileId",
          "datatype": "String",
          "description": "The ID of the repository. The ID of the repository file."
        }
      ],
      "datatype": "ConnectApi.RepositoryFileDetail"
    },
    {
      "name": "getRepositoryFile",
      "signature": "public static ConnectApi.RepositoryFileDetail getRepositoryFile(String repositoryId, String repositoryFileId, Boolean includeExternalFilePermissionsInfo)",
      "description": "Get a repository file with or without permissions information.",
      "params": [
        {
          "name": "includeExternalFilePermissionsInfo",
          "datatype": "Boolean",
          "description": "The ID of the repository. The ID of the repository file. Specifies whether to include permission information, such as whether the file is shared and what are the available permission types.Managing external file permissions is supported for Google Drive, SharePoint Online, and OneDrive for Business."
        }
      ],
      "datatype": "ConnectApi.RepositoryFileDetail"
    },
    {
      "name": "getRepositoryFile",
      "signature": "public static ConnectApi.RepositoryFileDetail getRepositoryFile(String communityId, String repositoryId, String repositoryFileId)",
      "description": "Get a repository file in a community.",
      "params": [
        {
          "name": "repositoryFileId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file."
        }
      ],
      "datatype": "ConnectApi.RepositoryFileDetail"
    },
    {
      "name": "getRepositoryFile",
      "signature": "public static ConnectApi.RepositoryFileDetail getRepositoryFile(String communityId, String repositoryId, String repositoryFileId, Boolean includeExternalFilePermissionsInfo)",
      "description": "Get a repository file with or without permissions information in a community.",
      "params": [
        {
          "name": "includeExternalFilePermissionsInfo",
          "datatype": "Boolean",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. Specifies whether to include permission information, such as whether the file is shared and what are the available permission types.Managing external file permissions is supported for Google Drive, SharePoint Online, and OneDrive for Business."
        }
      ],
      "datatype": "ConnectApi.RepositoryFileDetail"
    },
    {
      "name": "getRepositoryFolder",
      "signature": "public static ConnectApi.RepositoryFolderDetail getRepositoryFolder(String repositoryId, String repositoryFolderId)",
      "description": "Get a repository folder.",
      "params": [
        {
          "name": "repositoryFolderId",
          "datatype": "String",
          "description": "The ID of the repository. The ID of the repository folder."
        }
      ],
      "datatype": "ConnectApi.RepositoryFolderDetail"
    },
    {
      "name": "getRepositoryFolder",
      "signature": "public static ConnectApi.RepositoryFolderDetail getRepositoryFolder(String communityId, String repositoryId, String repositoryFolderId)",
      "description": "Get a repository folder in a community.",
      "params": [
        {
          "name": "repositoryFolderId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder."
        }
      ],
      "datatype": "ConnectApi.RepositoryFolderDetail"
    },
    {
      "name": "getRepositoryFolderItems",
      "signature": "public static ConnectApi.RepositoryFolderItemsCollection getRepositoryFolderItems(String repositoryId, String repositoryFolderId)",
      "description": "Get repository folder items.",
      "params": [
        {
          "name": "repositoryFolderId",
          "datatype": "String",
          "description": "The ID of the repository. The ID of the repository folder."
        }
      ],
      "datatype": "ConnectApi.RepositoryFolderItemsCollection"
    },
    {
      "name": "getRepositoryFolderItems",
      "signature": "public static ConnectApi.RepositoryFolderItemsCollection getRepositoryFolderItems(String communityId, String repositoryId, String repositoryFolderId)",
      "description": "Get repository folder items in a community.",
      "params": [
        {
          "name": "repositoryFolderId",
          "datatype": "String",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder."
        }
      ],
      "datatype": "ConnectApi.RepositoryFolderItemsCollection"
    },
    {
      "name": "getRepositoryFolderItems",
      "signature": "public static ConnectApi.RepositoryFolderItemsCollection getRepositoryFolderItems(String repositoryId, String repositoryFolderId, Integer pageParam, Integer pageSize)",
      "description": "Get a page of repository folder items.",
      "params": [
        {
          "name": "pageSize",
          "datatype": "Integer",
          "description": "The ID of the repository. The ID of the repository folder. Specifies the number of the page you want returned. Starts at 0. If you pass in null or 0, the first page is returned. Specifies the number of items per page. Valid values are from 1 through 100. If you pass in null, the default page size is 25."
        }
      ],
      "datatype": "ConnectApi.RepositoryFolderItemsCollection"
    },
    {
      "name": "getRepositoryFolderItems",
      "signature": "public static ConnectApi.RepositoryFolderItemsCollection getRepositoryFolderItems(String communityId, String repositoryId, String repositoryFolderId, Integer pageParam, Integer pageSize)",
      "description": "Get a page of repository folder items in a community.",
      "params": [
        {
          "name": "pageSize",
          "datatype": "Integer",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. Specifies the number of the page you want returned. Starts at 0. If you pass in null or 0, the first page is returned. Specifies the number of items per page. Valid values are from 1 through 100. If you pass in null, the default page size is 25."
        }
      ],
      "datatype": "ConnectApi.RepositoryFolderItemsCollection"
    },
    {
      "name": "updateRepositoryFile",
      "signature": "public static ConnectApi.RepositoryFileDetail updateRepositoryFile(String repositoryId, String repositoryFileId, ConnectApi.ContentHubItemInput file)",
      "description": "Update the metadata of a repository file.",
      "params": [
        {
          "name": "file",
          "datatype": "ConnectApi.ContentHubItemInput",
          "description": "The ID of the repository. The ID of the repository file. The item type ID and fields of the item type."
        }
      ],
      "datatype": "ConnectApi.RepositoryFileDetail"
    },
    {
      "name": "updateRepositoryFile",
      "signature": "public static ConnectApi.RepositoryFileDetail updateRepositoryFile(String repositoryId, String repositoryFileId, ConnectApi.ContentHubItemInput file, ConnectApi.BinaryInput fileData)",
      "description": "Update the content of a repository file.",
      "params": [
        {
          "name": "fileData",
          "datatype": "ConnectApi.BinaryInput",
          "description": "The ID of the repository. The ID of the repository file. The item type ID and fields of the item type. The binary file."
        }
      ],
      "datatype": "ConnectApi.RepositoryFileDetail"
    },
    {
      "name": "updateRepositoryFile",
      "signature": "public static ConnectApi.RepositoryFileDetail updateRepositoryFile(String communityId, String repositoryId, String repositoryFileId, ConnectApi.ContentHubItemInput file)",
      "description": "Update the metadata of a repository file in a community.",
      "params": [
        {
          "name": "file",
          "datatype": "ConnectApi.ContentHubItemInput",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. The item type ID and fields of the item type."
        }
      ],
      "datatype": "ConnectApi.RepositoryFileDetail"
    },
    {
      "name": "updateRepositoryFile",
      "signature": "public static ConnectApi.RepositoryFileDetail updateRepositoryFile(String communityId, String repositoryId, String repositoryFileId, ConnectApi.ContentHubItemInput file, ConnectApi.BinaryInput fileData)",
      "description": "Update the content of a repository file in a community.",
      "params": [
        {
          "name": "fileData",
          "datatype": "ConnectApi.BinaryInput",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. The item type ID and fields of the item type. The binary file."
        }
      ],
      "datatype": "ConnectApi.RepositoryFileDetail"
    },
    {
      "name": "setTestAddRepositoryItem",
      "signature": "public static Void setTestAddRepositoryItem(String repositoryId, String repositoryFolderId, ConnectApi.ContentHubItemInput file, ConnectApi.RepositoryFolderItem result)",
      "description": "Register a ConnectApi.RepositoryFolderItem object to be returned when the matching addRepositoryItem(repositoryId, repositoryFolderId, file) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFolderItem",
          "description": "The ID of the repository. The ID of the repository folder. The item type ID and fields of the item type. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestAddRepositoryItem",
      "signature": "public static Void setTestAddRepositoryItem(String communityId, String repositoryId, String repositoryFolderId, ConnectApi.ContentHubItemInput file, ConnectApi.RepositoryFolderItem result)",
      "description": "Register a ConnectApi.RepositoryFolderItem object to be returned when the matching addRepositoryItem(communityId, repositoryId, repositoryFolderId, file) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFolderItem",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. The item type ID and fields of the item type. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestAddRepositoryItem",
      "signature": "public static Void setTestAddRepositoryItem(String repositoryId, String repositoryFolderId, ConnectApi.ContentHubItemInput file, ConnectApi.BinaryInput fileData, ConnectApi.RepositoryFolderItem result)",
      "description": "Register a ConnectApi.RepositoryFolderItem object to be returned when the matching addRepositoryItem(repositoryId, repositoryFolderId, file, fileData) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFolderItem",
          "description": "The ID of the repository. The ID of the repository folder. The item type ID and fields of the item type. The binary file. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestAddRepositoryItem",
      "signature": "public static Void setTestAddRepositoryItem(String communityId, String repositoryId, String repositoryFolderId, ConnectApi.ContentHubItemInput file, ConnectApi.BinaryInput fileData, ConnectApi.RepositoryFolderItem result)",
      "description": "Register a ConnectApi.RepositoryFolderItem object to be returned when the matching addRepositoryItem(communityId, repositoryId, repositoryFolderId, file, fileData) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFolderItem",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. The item type ID and fields of the item type. The binary file. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetAllowedItemTypes",
      "signature": "public static Void setTestGetAllowedItemTypes(String repositoryId, String repositoryFolderId, ConnectApi.ContentHubAllowedItemTypeCollection result)",
      "description": "Register a ConnectApi.ContentHubAllowedItemTypeCollection object to be returned when the matching getAllowedItemTypes(repositoryId, repositoryFolderId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubAllowedItemTypeCollection",
          "description": "The ID of the repository. The ID of the repository folder. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetAllowedItemTypes",
      "signature": "public static Void setTestGetAllowedItemTypes(String repositoryId, String repositoryFolderId, ConnectApi.ContentHubItemType filter, ConnectApi.ContentHubAllowedItemTypeCollection result)",
      "description": "Register a ConnectApi.ContentHubAllowedItemTypeCollection object to be returned when the matching getAllowedItemTypes(repositoryId, repositoryFolderId, filter) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubAllowedItemTypeCollection",
          "description": "The ID of the repository. The ID of the repository folder. Item types. Values are:  Any—Includes files and folders.   FilesOnly—Includes files only.   FoldersOnly—Includes folders only.    The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetAllowedItemTypes",
      "signature": "public static Void setTestGetAllowedItemTypes(String communityId, String repositoryId, String repositoryFolderId, ConnectApi.ContentHubAllowedItemTypeCollection result)",
      "description": "Register a ConnectApi.ContentHubAllowedItemTypeCollection object to be returned when the matching getAllowedItemTypes(communityId, repositoryId, repositoryFolderId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubAllowedItemTypeCollection",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetAllowedItemTypes",
      "signature": "public static Void setTestGetAllowedItemTypes(String communityId, String repositoryId, String repositoryFolderId, ConnectApi.ContentHubItemType filter, ConnectApi.ContentHubAllowedItemTypeCollection result)",
      "description": "Register a ConnectApi.ContentHubAllowedItemTypeCollection object to be returned when the matching getAllowedItemTypes(communityId, repositoryId, repositoryFolderId, filter) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubAllowedItemTypeCollection",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. Item types. Values are:  Any—Includes files and folders.   FilesOnly—Includes files only.   FoldersOnly—Includes folders only.    The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetFilePreview",
      "signature": "public static Void setTestGetFilePreview(String repositoryId, String repositoryFileId, ConnectApi.FilePreviewFormat formatType, ConnectApi.FilePreview result)",
      "description": "Register a ConnectApi.FilePreview object to be returned when the matching getFilePreview(repositoryId, repositoryFileId, formatType) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.FilePreview",
          "description": "The ID of the repository. The ID of the repository file. Specifies the format of the file preview. Values are:  Jpg—Preview format is JPG.   Pdf—Preview format is PDF.   Svg—Preview format is compressed SVG.   Thumbnail—Preview format is 240 x 180 PNG.   ThumbnailBig—Preview format is 720 x 480 PNG.   ThumbnailTiny—Preview format is 120 x 90 PNG.   PDF previews are available for files of type DOC, DOCX, PPT, PPTX, TEXT, XLS, and XLSX. SVG files are generated on demand.If you’re concerned that feature-rich SVG previews don’t work in your org, choose alternative file previews. To use JPG file previews, enter general in the Quick Find box in Setup. Select General Settings, and then select Display alternative file previews.  The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetFilePreview",
      "signature": "public static Void setTestGetFilePreview(String repositoryId, String repositoryFileId, ConnectApi.FilePreviewFormat formatType, Integer startPageNumber, Integer endPageNumber, ConnectApi.FilePreview result)",
      "description": "Register a ConnectApi.FilePreview object to be returned when the matching getFilePreview(repositoryId, repositoryFileId, formatType, startPageNumber, endPageNumber) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.FilePreview",
          "description": "The ID of the repository. The ID of the repository file. Specifies the format of the file preview. Values are:  Jpg—Preview format is JPG.   Pdf—Preview format is PDF.   Svg—Preview format is compressed SVG.   Thumbnail—Preview format is 240 x 180 PNG.   ThumbnailBig—Preview format is 720 x 480 PNG.   ThumbnailTiny—Preview format is 120 x 90 PNG.   PDF previews are available for files of type DOC, DOCX, PPT, PPTX, TEXT, XLS, and XLSX. SVG files are generated on demand.If you’re concerned that feature-rich SVG previews don’t work in your org, choose alternative file previews. To use JPG file previews, enter general in the Quick Find box in Setup. Select General Settings, and then select Display alternative file previews.  The starting page number in the range of file preview URLs. The ending page number in the range of file preview URLs. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetFilePreview",
      "signature": "public static Void setTestGetFilePreview(String communityId, String repositoryId, String repositoryFileId, ConnectApi.FilePreviewFormat formatType, ConnectApi.FilePreview result)",
      "description": "Register a ConnectApi.FilePreview object to be returned when the matching getFilePreview(communityId, repositoryId, repositoryFileId, formatType) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.FilePreview",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. Specifies the format of the file preview. Values are:  Jpg—Preview format is JPG.   Pdf—Preview format is PDF.   Svg—Preview format is compressed SVG.   Thumbnail—Preview format is 240 x 180 PNG.   ThumbnailBig—Preview format is 720 x 480 PNG.   ThumbnailTiny—Preview format is 120 x 90 PNG.   PDF previews are available for files of type DOC, DOCX, PPT, PPTX, TEXT, XLS, and XLSX. SVG files are generated on demand.If you’re concerned that feature-rich SVG previews don’t work in your org, choose alternative file previews. To use JPG file previews, enter general in the Quick Find box in Setup. Select General Settings, and then select Display alternative file previews.  The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetFilePreview",
      "signature": "public static Void setTestGetFilePreview(String communityId, String repositoryId, String repositoryFileId, ConnectApi.FilePreviewFormat formatType, Integer startPageNumber, Integer endPageNumber, ConnectApi.FilePreview result)",
      "description": "Register a ConnectApi.FilePreview object to be returned when the matching getFilePreview(communityId, repositoryId, repositoryFileId, formatType, startPageNumber, endPageNumber) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.FilePreview",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. Specifies the format of the file preview. Values are:  Jpg—Preview format is JPG.   Pdf—Preview format is PDF.   Svg—Preview format is compressed SVG.   Thumbnail—Preview format is 240 x 180 PNG.   ThumbnailBig—Preview format is 720 x 480 PNG.   ThumbnailTiny—Preview format is 120 x 90 PNG.   PDF previews are available for files of type DOC, DOCX, PPT, PPTX, TEXT, XLS, and XLSX. SVG files are generated on demand.If you���re concerned that feature-rich SVG previews don’t work in your org, choose alternative file previews. To use JPG file previews, enter general in the Quick Find box in Setup. Select General Settings, and then select Display alternative file previews.  The starting page number in the range of file preview URLs. The ending page number in the range of file preview URLs. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetItemType",
      "signature": "public static Void setTestGetItemType(String repositoryId, String repositoryItemTypeId, ConnectApi.ContentHubItemTypeDetail result)",
      "description": "Register a ConnectApi.ContentHubItemTypeDetail object to be returned when the matching getItemType(repositoryId, repositoryItemTypeId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubItemTypeDetail",
          "description": "The ID of the repository. The ID of the repository item type. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetItemType",
      "signature": "public static Void setTestGetItemType(String communityId, String repositoryId, String repositoryItemTypeId, ConnectApi.ContentHubItemTypeDetail result)",
      "description": "Register a ConnectApi.ContentHubItemTypeDetail object to be returned when the matching getItemType(communityId, repositoryId, repositoryItemTypeId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubItemTypeDetail",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository item type. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetPreviews",
      "signature": "public static Void setTestGetPreviews(String repositoryId, String repositoryFileId, ConnectApi.FilePreviewCollection result)",
      "description": "Register a ConnectApi.FilePreviewCollection object to be returned when the matching getPreviews(repositoryId, repositoryFileId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.FilePreviewCollection",
          "description": "The ID of the repository. The ID of the repository file. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetPreviews",
      "signature": "public static Void setTestGetPreviews(String communityId, String repositoryId, String repositoryFileId, ConnectApi.FilePreviewCollection result)",
      "description": "Register a ConnectApi.FilePreviewCollection object to be returned when the matching getPreviews(communityId, repositoryId, repositoryFileId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.FilePreviewCollection",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositories",
      "signature": "public static Void setTestGetRepositories(ConnectApi.ContentHubRepositoryCollection result)",
      "description": "Register a ConnectApi.ContentHubRepositoryCollection object to be returned when the matching getRepositories() method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubRepositoryCollection",
          "description": "The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositories",
      "signature": "public static Void setTestGetRepositories(String communityId, ConnectApi.ContentHubRepositoryCollection result)",
      "description": "Register a getRepositories(communityId) object to be returned when the matching ConnectApi.ContentHubRepositoryCollection method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubRepositoryCollection",
          "description": "Use either the ID for a community, internal, or null. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositories",
      "signature": "public static Void setTestGetRepositories(Integer pageParam, Integer pageSize, ConnectApi.ContentHubRepositoryCollection result)",
      "description": "Register a ConnectApi.ContentHubRepositoryCollection object to be returned when the matching getRepositories(pageParam, pageSize) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubRepositoryCollection",
          "description": "Specifies the number of the page you want returned. Starts at 0. If you pass in null or 0, the first page is returned. Specifies the number of items per page. Valid values are from 1 through 100. If you pass in null, the default page size is 25. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositories",
      "signature": "public static Void setTestGetRepositories(String communityId, Integer pageParam, Integer pageSize, ConnectApi.ContentHubRepositoryCollection result)",
      "description": "Register a ConnectApi.ContentHubRepositoryCollection object to be returned when the matching getRepositories(communityId, pageParam, pageSize) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubRepositoryCollection",
          "description": "Use either the ID for a community, internal, or null. Specifies the number of the page you want returned. Starts at 0. If you pass in null or 0, the first page is returned. Specifies the number of items per page. Valid values are from 1 through 100. If you pass in null, the default page size is 25. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepository",
      "signature": "public static Void setTestGetRepository(String repositoryId, ConnectApi.ContentHubRepository result)",
      "description": "Register a ConnectApi.ContentHubRepository object to be returned when the matching getRepository(repositoryId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubRepository",
          "description": "The ID of the repository. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepository",
      "signature": "public static Void setTestGetRepository(String communityId, String repositoryId, ConnectApi.ContentHubRepository result)",
      "description": "Register a ConnectApi.ContentHubRepository object to be returned when the matching getRepository(communityId, repositoryId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.ContentHubRepository",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositoryFile",
      "signature": "public static Void setTestGetRepositoryFile(String repositoryId, String repositoryFileId, ConnectApi.RepositoryFileDetail result)",
      "description": "Register a ConnectApi.RepositoryFileDetail object to be returned when the matching getRepositoryFile(repositoryId, repositoryFileId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFileDetail",
          "description": "The ID of the repository. The ID of the repository file. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositoryFile",
      "signature": "public static Void setTestGetRepositoryFile(String repositoryId, String repositoryFileId, Boolean includeExternalFilePermissionsInfo, ConnectApi.RepositoryFileDetail result)",
      "description": "Register a ConnectApi.RepositoryFileDetail object to be returned when the matching getRepositoryFile(repositoryId, repositoryFileId, includeExternalFilePermissionsInfo) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFileDetail",
          "description": "The ID of the repository. The ID of the repository file. Specifies whether to include permission information, such as whether the file is shared and what are the available permission types.Managing external file permissions is supported for Google Drive, SharePoint Online, and OneDrive for Business.  The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositoryFile",
      "signature": "public static Void setTestGetRepositoryFile(String communityId, String repositoryId, String repositoryFileId, ConnectApi.RepositoryFileDetail result)",
      "description": "Register a ConnectApi.RepositoryFileDetail object to be returned when the matching getRepositoryFile(communityId, repositoryId, repositoryFileId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFileDetail",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositoryFile",
      "signature": "public static Void setTestGetRepositoryFile(String communityId, String repositoryId, String repositoryFileId, Boolean includeExternalFilePermissionsInfo, ConnectApi.RepositoryFileDetail result)",
      "description": "Register a ConnectApi.RepositoryFileDetail object to be returned when the matching getRepositoryFile(communityId, repositoryId, repositoryFileId, includeExternalFilePermissionsInfo) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFileDetail",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. Specifies whether to include permission information, such as whether the file is shared and what are the available permission types.Managing external file permissions is supported for Google Drive, SharePoint Online, and OneDrive for Business.  The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositoryFolder",
      "signature": "public static Void setTestGetRepositoryFolder(String repositoryId, String repositoryFolderId, ConnectApi.RepositoryFolderDetail result)",
      "description": "Register a ConnectApi.RepositoryFolderDetail object to be returned when the matching getRepositoryFolder(repositoryId, repositoryFolderId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFolderDetail",
          "description": "The ID of the repository. The ID of the repository folder. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositoryFolder",
      "signature": "public static Void setTestGetRepositoryFolder(String communityId, String repositoryId, String repositoryFolderId, ConnectApi.RepositoryFolderDetail result)",
      "description": "Register a ConnectApi.RepositoryFolderDetail object to be returned when the matching getRepositoryFolder(communityId, repositoryId, repositoryFolderId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFolderDetail",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositoryFolderItems",
      "signature": "public static Void setTestGetRepositoryFolderItems(String repositoryId, String repositoryFolderId, ConnectApi.RepositoryFolderItemsCollection result)",
      "description": "Register a ConnectApi.RepositoryFolderItemsCollection object to be returned when the matching getRepositoryFolderItems(repositoryId, repositoryFolderId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFolderItemsCollection",
          "description": "The ID of the repository. The ID of the repository folder. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositoryFolderItems",
      "signature": "public static Void setTestGetRepositoryFolderItems(String communityId, String repositoryId, String repositoryFolderId, ConnectApi.RepositoryFolderItemsCollection result)",
      "description": "Register a ConnectApi.RepositoryFolderItemsCollection object to be returned when the matching getRepositoryFolderItems(communityId, repositoryId, repositoryFolderId) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFolderItemsCollection",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositoryFolderItems",
      "signature": "public static Void setTestGetRepositoryFolderItems(String repositoryId, String repositoryFolderId, Integer pageParam, Integer pageSize, ConnectApi.RepositoryFolderItemsCollection result)",
      "description": "Register a ConnectApi.RepositoryFolderItemsCollection object to be returned when the matching getRepositoryFolderItems(repositoryId, repositoryFolderId, pageParam, pageSize) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFolderItemsCollection",
          "description": "The ID of the repository. The ID of the repository folder. Specifies the number of the page you want returned. Starts at 0. If you pass in null or 0, the first page is returned. Specifies the number of items per page. Valid values are from 1 through 100. If you pass in null, the default page size is 25. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestGetRepositoryFolderItems",
      "signature": "public static Void setTestGetRepositoryFolderItems(String communityId, String repositoryId, String repositoryFolderId, Integer pageParam, Integer pageSize, ConnectApi.RepositoryFolderItemsCollection result)",
      "description": "Register a ConnectApi.RepositoryFolderItemsCollection object to be returned when the matching getRepositoryFolderItems(communityId, repositoryId, repositoryFolderId, pageParam, pageSize) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFolderItemsCollection",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository folder. Specifies the number of the page you want returned. Starts at 0. If you pass in null or 0, the first page is returned. Specifies the number of items per page. Valid values are from 1 through 100. If you pass in null, the default page size is 25. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestUpdateRepositoryFile",
      "signature": "public static Void setTestUpdateRepositoryFile(String communityId, String repositoryId, String repositoryFileId, ConnectApi.ContentHubItemInput file, ConnectApi.BinaryInput fileData, ConnectApi.RepositoryFileDetail result)",
      "description": "Register a ConnectApi.RepositoryFileDetail object to be returned when the matching updateRepositoryFile(communityId, repositoryId, repositoryFileId, file, fileData) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFileDetail",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. The item type ID and fields of the item type. The binary file. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestUpdateRepositoryFile",
      "signature": "public static Void setTestUpdateRepositoryFile(String repositoryId, String repositoryFileId, ConnectApi.ContentHubItemInput file, ConnectApi.RepositoryFileDetail result)",
      "description": "Register a ConnectApi.RepositoryFileDetail object to be returned when the matching updateRepositoryFile(repositoryId, repositoryFileId, file) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFileDetail",
          "description": "The ID of the repository. The ID of the repository file. The item type ID and fields of the item type. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestUpdateRepositoryFile",
      "signature": "public static Void setTestUpdateRepositoryFile(String repositoryId, String repositoryFileId, ConnectApi.ContentHubItemInput file, ConnectApi.BinaryInput fileData, ConnectApi.RepositoryFileDetail result)",
      "description": "Register a ConnectApi.RepositoryFileDetail object to be returned when the matching updateRepositoryFile(repositoryId, repositoryFileId, file, fileData) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFileDetail",
          "description": "The ID of the repository. The ID of the repository file. The item type ID and fields of the item type. The binary file. The object containing test data."
        }
      ],
      "datatype": "Void"
    },
    {
      "name": "setTestUpdateRepositoryFile",
      "signature": "public static Void setTestUpdateRepositoryFile(String communityId, String repositoryId, String repositoryFileId, ConnectApi.ContentHubItemInput file, ConnectApi.RepositoryFileDetail result)",
      "description": "Register a ConnectApi.RepositoryFileDetail object to be returned when the matching updateRepositoryFile(communityId, repositoryId, repositoryFileId, file) method is called in a test context. Use the method with the same parameters or you receive an exception.",
      "params": [
        {
          "name": "result",
          "datatype": "ConnectApi.RepositoryFileDetail",
          "description": "Use either the ID for a community, internal, or null. The ID of the repository. The ID of the repository file. The item type ID and fields of the item type. The object containing test data."
        }
      ],
      "datatype": "Void"
    }
  ],
  "description": "Access Files Connect repositories and their files and folders.",
  "docLink": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_ConnectAPI_ContentHub_static_methods.htm"
}