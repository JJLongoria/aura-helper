{
    "features_summary": "Features Summary",
    "code_completion": "Code Completion",
    "advance_gui": "Advance Graphic User Interface",
    "apex_code_formatter": "Apex Code Formatter",
    "version_control_and_metadata": "Version Control and Metadata",
    "documentation": "Documentation",
    "settings": "Settings",
    "commands": "Commands",
    "add_javascript_aura_function": "Add Javascript Aura Function",
    "add_method_block_aura_documentation": "Add Method Block to Aura Documentation",
    "compress_xml_file": "Compress XML File",
    "compress_all_xml_files": "Compress ALL XML Files",
    "edit_apex_comment_template": "Edit Apex Comment Template",
    "edit_aura_documentation_template": "Edit Aura Documentation Template",
    "generate_aura_doc": "Generate Aura Documentation",
    "match_org_with_local": "Match Org With Local",
    "new_aura_file": "New Aura File",
    "refresh_metadata_index": "Refresh Metadata Index",
    "refresh_metadata_index_for_object": "Refresh Metadata Index for Object",
    "retrieve_full_permission_sets": "Retrieve Full Permission Set(s)",
    "retrieve_full_profiles": "Retrieve Full Profile(s)",
    "views": "Views",
    "file_structure_view": "File Structure",
    "graphic_user_interface": "Graphic User Interface",
    "open_permission_set_on_ui": "Open Permission Set on UI",
    "open_profile_on_ui": "Open Profile on UI",
    "package_generator_xml": "Package Generator (package.xml)",
    "code_completion_tools": "Code Completion Tools",
    "call_and_create_aura_components": "Get, call & create Components",
    "get_aura_components_attributes": "Getting Component Attributes",
    "get_js_controller_functions": "Getting JS Controller Functions",
    "get_js_helper_functions": "Getting JS Helper Functions",
    "get_apex_methods_on_js": "Getting Apex Methods on JavaScript",
    "support_on_queries": "Queries Support",
    "apex_code_support": "Apex Code Support",
    "custom_labels_support": "Custom Labels Support",
    "picklist_values_support": "Picklist Values Support",
    "documentation_templates": "Documentation (Templates)",
    "aura_doc_template": "Aura Documentation Template",
    "apex_comment_template": "Apex Comment Template",
    "snippets_collection": "Snippets Collection",
    "help_introduction": "Aura Helper includes a navigable help to learn more about all the features contained in the extension and thus make better use and be more productive",
    "examples": "Examples",
    "example": "Example",
    "custom_labels_gui": "Custom Labels UI",
    "code_completion_feature_explanation_paragraph_1": "Aura Helper offers the user multiple code autocomplete tools to facilitate coding, which can be activated or disabled from the extension settings.",
    "code_completion_feature_explanation_paragraph_2": "Some of the functions are:",
    "code_completion_feature_explanation_feature_1": "Ability to list all objects, custom and standard available in the application. It works in the Apex classes",
    "code_completion_feature_explanation_feature_2": "List the fields of the objects, including information such as label, picklist values, length ... It works in both Apex classes and Lightning components",
    "code_completion_feature_explanation_feature_3": "Show all application classes, including system classes (System, Database...). It works in the Apex classes",
    "code_completion_feature_explanation_feature_4": "Obtain and list the variables and methods of all classes, including system classes. It works in the Apex classes",
    "code_completion_feature_explanation_feature_5": "Ability to create class and method comments quickly through a user-defined template",
    "code_completion_feature_explanation_feature_6": "Ability to list the above information concatenated (class.method (). Method ()...). It works in both Apex classes and Lightning components",
    "code_completion_feature_explanation_feature_7": "List all the standard and custom lightning components of any namespace (lightning, aura...)",
    "code_completion_feature_explanation_feature_8": "List attributes not included in calls to lightnig components, both custom and standard of any namespace",
    "code_completion_feature_explanation_feature_9": "Suggest the possible values ​​of the attributes of the elements of the lightning components, such as variants, sizes...",
    "code_completion_feature_explanation_feature_10": "Ability to display the functions of the Apex, Javascript or Helper files in the files of any Lightning Bundle",
    "code_completion_feature_explanation_feature_11": "Support to facilitate the construction of queries showing the fields of the object indicated in the \"from\" clause",
    "code_completion_feature_explanation_feature_12": "More than 100 code snippets to facilitate the creation of lightning components. For more details see the",
    "code_completion_feature_explanation_feature_13": "Autocomplete support for Custom Labels. It is necessary to have them downloaded in the project. Work in Apex, Lightning and Javascript",
    "code_completion_feature_explanation_feature_14": "Autocomplete tools for Picklist values. Aura Helper list all available picklist values for each field object, and can select it for pick the value (Example: Account.picklistfield.picklistValue -> 'picklistValue')",
    "code_completion_feature_explanation_feature_15": "Support for implement automatically inherited methods from interfaces and extended classes. In the last case, only implement abstract and virtual methods",
    "advance_gui_feature_explanation_paragraph_1": "Another of the main features that Aura Helper implements, is the support of an advanced graphical interface to implement more powerful features that facilitate the maintenance of metadata or serve as support for other tasks.",
    "advance_gui_feature_explanation_paragraph_2": "Through the graphical interface, Aura Helper provides a tool to create <code>package.xml</code> files quickly, both of the local metadata, and of all the metadata of the organization.",
    "advance_gui_feature_explanation_paragraph_3": "Another feature implemented through the interface is the ability to manage metadata files as if it were Salesforce. Add similar validations and behavior, taking into account the context and possibilities offered by VSCode.",
    "advance_gui_feature_explanation_paragraph_4": "Finally, it should be noted that Aura Helper has multilanguage support for the advanced graphic interface, being able to choose between the different languages ​​available from the Aura Helper configuration",
    "advance_gui_feature_explanation_paragraph_5": "The currently available Views are:",
    "advance_gui_feature_available_view_1": "View to view and edit profiles",
    "advance_gui_feature_available_view_2": "View to view and edit permission sets",
    "advance_gui_feature_available_view_3": "Package Generator",
    "advance_gui_feature_available_view_4": "View to view, create and edit Custom Labels",
    "advance_gui_feature_available_view_5": "Help",
    "apex_code_formatter_feature_explanation_paragraph_1": "Due to the lack of code formatters exclusively for Apex and that official salesforce extensions do not implement it, Aura Helper has a tool to format Apex code. We just have to press <code>Alt + Shift + F</code>. Aura Helper's formatter allow to the user configure the format style on Aura Helper's Settings. (View Settings Section)",
    "version_control_and_metadata_feature_explanation_paragraph_1": "To facilitate working with version control applications such as Git, Aura Helper contains several tools to manage metadata files which simplify version control in Salesforce.",
    "version_control_and_metadata_feature_explanation_paragraph_2": "Some of the tools are:",
    "version_control_and_metadata_feature_explanation_feature_1": "Possibility of compressing the XML files so that they occupy fewer lines and reorganize the content to facilitate its reading by the user",
    "version_control_and_metadata_feature_explanation_feature_2": "Graphical interface to manage files more simply and without leaving VSCode",
    "version_control_and_metadata_feature_explanation_feature_3": "Possibility of updating the files that are created at runtime during the deployments depending on the content, such as profiles or permission sets, including all system information and without the need to update the other elements",
    "version_control_and_metadata_feature_explanation_feature_4": "Ability to check what elements exist in the environment and not locally, to be able to eliminate them and match the environment with the local content. The user can choose which metadata will be deleted",
    "version_control_and_metadata_feature_explanation_feature_5": "If we want to perform metadata deployments or retrieves, we can use the Package Generator tools and the SFDX Deploy and Retrieve options. The Package Generator tool can list your stored metadata (on local and org) and allow to select them manally, from other package or from Git, for better metadata control (See the Package Generator Section).",
    "documentation_feature_explanation_paragraph_1": "Documentation",
    "documentation_feature_explanation_paragraph_2": "The main tools are:",
    "documentation_feature_explanation_feature_1": "Ability to generate comments of classes and Apex methods following the structure of a user-defined template, so that it can be adapted the style of comments to that established in the project.",
    "documentation_feature_explanation_feature_2": "Support to automatically generate all or almost all documentation of the Lightning components <code>(.auradoc)</code>. Using the Javascript comment scheme, and a user-defined template, almost all of the documentation can be generated with a single click",
    "documentation_feature_explanation_feature_3": "Support to generate project documentation automatically similar to Salesforce official doc with links on datatypes (both, custom and standard). To do this, it uses the classes stored locally together with the comments of methods, classes and variables that match the established template. Added support for creating comments for class variables so that they can be analyzed later to generate documentation",
    "settings_feature_explanation_paragraph_1": "Aura Helper's provide to the user some configuration options for adapt the tool to your work flow",
    "settings_feature_explanation_paragraph_2": "Some of the settings are:",
    "settings_feature_explanation_feature_1": "Configure your apex format style",
    "settings_feature_explanation_feature_2": "Enable or Disable the autocompletion tools",
    "settings_feature_explanation_feature_3": "Select your GUI Default preferred language",
    "add_javascript_aura_function_command_paragraph_1": "This command allows the creation of a block of code that represents a Javascript function in the Aura files that allows you to choose the number of parameters that will have the function, in this way we can create functions faster.",
    "add_javascript_aura_function_command_paragraph_2": "To use this feature you must place the mouse in the position of the file where we want to create the function and execute the \"Add Javascript Aura Function\" command, We choose the number of parameters we want for the function and that's it.",
    "add_method_block_aura_documentation_command_paragraph_1": "This command allows you to add a new method to the Aura documentation file following the scheme established in the template. The block will be created at the position of the mouse when executing the command and when executing it will provide us with a list of the methods available, both from the helper and the controller.",
    "add_method_block_aura_documentation_command_paragraph_2": "You can edit the template at any time with the <a href=\"#editAuraDocumentationTemplate\">\"Edit Aura Documentation Template\"</a> command. To know more about templates, <a href=\"#templatesSection\">click here</a>",
    "compress_xml_file_command_paragraph_1": "To facilitate file management with version control programs such as GIT, Aura Helper provides a method to compress XML files of metadata so that it is easier to identify the changes, combine them or discard them. It also reduces the size of the files allowing more efficient management by Git or the like.",
    "compress_xml_file_command_paragraph_2": "To execute this command we have several options:",
    "compress_xml_file_command_option_1": "Execute the command with an open XML file to compress that file",
    "compress_xml_file_command_option_2": "Right click on the open file and execute the command from the context menu",
    "compress_xml_file_command_option_3": "Right click on the file in the file explorer and execute the command from the context menu",
    "compress_all_xml_files_command_paragraph_1": "Just as we can compress a single file, we can compress all the metadata files of the project or a specific folder.",
    "compress_all_xml_files_command_paragraph_2": "To execute this command we have several options:",
    "compress_all_xml_files_command_option_1": "If we execute the command from the command palette, all the files will be compressed",
    "compress_all_xml_files_command_option_2": "Right click on the root metadata folder of the project and execute the command from the context menu. This will compress all files",
    "compress_all_xml_files_command_option_3": "Right click on a specific folder and execute the command from the context menu. This will compress all the files in that folder, including subfolders",
    "edit_apex_comment_template_command_paragraph_1": "The \"Edit Apex Comment Template\" command allows you to edit the template that will be used to create the comments of the Apex classes and methods. This template can be edited by the user following the rules indicated in the templates section in order to adapt the project documentation to the standards set by the user",
    "templates_more_info": "To learn more about templates, <a href=\"#templatesSection \">click here</a>",
    "edit_aura_documentation_template_command_paragraph_1": "This command, similar to the command to edit the Apex comment template, allows you to create and edit a template to create the documentation Lightning components automatically.",
    "generate_aura_doc_command_paragraph_1": "This command allows you to create the Aura documentation of the lightning components automatically based on the user-defined template and the basic JavaScript comment scheme",
    "generate_aura_doc_command_paragraph_2": "You can edit the documentation template at any time by running the <a href=\"#editAuraDocumentationTemplate\">\"Edit Aura Documentation Template\"</a>",
    "match_org_with_local_command_paragraph_1": "The \"Match Org With Local\" command compares all the metadata that exists in the local project with the metadata that exists in the application for later offer the user a view with the metadata that exists in the organization but does not exist locally. The process may take several minutes depending on the connection Internet and your PC.",
    "match_org_with_local_command_paragraph_2": "In the view shown, the user can choose which metadata he wants to delete from the organization to match the environment with the local project and, by clicking on \"Delete\", selected metadata will be removed from the organization. This process is much faster than the comparison of data, except for production, where they will run the test classes, which can lengthen the process.",
    "new_aura_file_command_paragraph_1": "With this command we can create any file within the Aura package. We can execute it in two ways:",
    "new_aura_file_command_paragraph_2": "After executing this command, we will be shown a list to choose the type of file we want to create. Only files that do not exist in the Bundle will appear.",
    "new_aura_file_command_paragraph_3": "All files will be created with the default structure, except the documentation file, which will be created with the user-defined template (or the default template)",
    "new_aura_file_command_option_1": "This command can be executed when an Aura Component file (<code>.cmp</code>) is open in the editor",
    "new_aura_file_command_option_2": "You can right click on the Aura Component file (<code>.cmp</code>) or in the component package folder and select the command in the context menu",
    "refresh_metadata_index_command_paragraph_1": "To offer a better code autocomplete experience, Aura Helper has commands to refresh the index of objects and their fields. To update this index, we must execute this command",
    "refresh_metadata_index_command_paragraph_2": "This operation may take several minutes depending on the number of objects in the organization, but it is only necessary to execute it completely once, since Aura Helper has another command to update the <a href=\"#refreshMetadataIndexForObject\">Index of an Object</a>, being a much faster execution.",
    "refresh_metadata_index_for_object_command_paragraph_1": "Just as we can update the index for all the objects in the organization, we can do it for a single object. This operation is significantly more. Quick than the full index update.",
    "refresh_metadata_index_for_object_command_paragraph_2": "This operation may take several minutes, depending on the connection speed and the number of objects in the organization.",
    "refresh_metadata_index_for_object_command_paragraph_3": "To update the complete index, execute the <a href=\"#refreshMetadataIndex\">\"Refresh Metadata Index\"</a>",
    "retrieve_full_permission_sets_command_paragraph_1": "This command allows you to update the files of permissions sets stored locally with all the permissions, unlike a retrieve normal, which brings basic information if we include other metadata such as classes, fields, objects...",
    "retrieve_full_permission_sets_command_paragraph_2": "It only affects the permission files and allows the update of one or all the permissions, both those stored locally and all those of the organization.",
    "retrieve_full_profiles_command_paragraph_1": "This command allows updating profile files stored locally with all the permissions, unlike a retrieve normal, which brings basic information if we include other metadata such as classes, fields, objects...",
    "retrieve_full_profiles_command_paragraph_2": "It only affects the profile files and allows the update of one or all profiles, both those stored locally and all those of the organization.",
    "file_structure_view_tool_paragraph_1": "Aura Helper provides a view that allows you to quickly identify the structure of methods, fields, classes, labels or elements of various files both Apex classes, JavaScript files of Aura components or the same components. It also allows to see the structure of several XML files of Metadata. <br/> By clicking on any of the items in the list, you will navigate directly to the definition of the pressed item.",
    "file_structure_view_tool_paragraph_2": "This view can be activated and deactivated this side view panel from the extension options.",
    "open_permission_set_on_ui_tool_paragraph_1": "Aura Helper includes tools to provide the user with a graphical interface to facilitate the management of Permission Sets. The interface is managed by similar to salesforce, with similar responses.",
    "open_profile_on_ui_tool_paragraph_1": "Just as permission sets can be opened in the graphical interface, profiles can be managed in the same way to manage all permissions without leaving VSCode easily.",
    "package_generator_xml_tool_paragraph_1": "Aura Helper includes a tool that allows the generation of <code>package.xml</code> files both for downloading and for displaying metadata.",
    "package_generator_xml_tool_paragraph_2": "It is capable of loading and displaying all types of metadata stored in the local project, as well as displaying all the metadata of the organization. It also allows you to save the file in the project manifest, or in any other location",
    "custom_labels_gui_tool_paragraph_1": "Another of the graphic interfaces available to Aura Helper is the management of Custom Labels. A View to be able to create, edit, delete or search among project labels.",
    "custom_labels_gui_tool_paragraph_2": "Together with the code autocomplete tool for custom tags, it provides a great tool to use and manage these labels much more efficiently. It will be necessary to download them in the local project to make use of these tools",
    "code_completion_tools_explanation": "Aura Helper provides multiple code autocomplete tools for both Apex and Lightning, allowing for easier and more efficient programming. <br />At the same time you have multiple snippets that can be seen more closely in the <a href=\"#snippetsCollectionSection\">Snippets</a> section",
    "call_and_create_aura_components_tool_paragraph_1": "One of the code autocomplete tools available to Aura Helper is the ability to obtain, call and build Lightning components, events and applications",
    "call_and_create_aura_components_tool_paragraph_2": "Ways to use:",
    "call_and_create_aura_components_tool_paragraph_3": "It works on both <code>.cmp</code> and <code>.js</code> files and can be activated and deactivated from the extension settings",
    "call_and_create_aura_components_tool_option_1": "Type <code>c:</code> and press <code>Ctrl + space</code> to get a list of all the components, events and applications of the space named \"c\"",
    "call_and_create_aura_components_tool_option_2": "If you type <code>&lt;c:ComponentName</code> and press <code>Ctrl + space</code> you will get a list of all the attributes of the component, appearing only those that are not already added to the component",
    "call_and_create_aura_components_tool_option_3": "Once the attribute is written, Aura Helper can suggest the possible supported values ​​by pressing <code>Ctrl + space</code>",
    "call_and_create_aura_components_tool_option_4": "To call Standard components (aura, lightning, ui ...), we only have to type <code>&lt;Namespace:ComponentName</code> and press <code>Ctrl + space</code> to get a list of the attributes of the component",
    "call_and_create_aura_components_tool_option_5": "Multiple snippets are also available to create all kinds of components and their cariants, check the <a href=\"#snippetsCollectionSection\">Snippets</a> section",
    "get_aura_components_attributes_tool_paragraph_1": "In the same way that you can obtain the attributes of the components to create them quickly, you can obtain these to reference them in the component. To do this, you must only type <code>v.</code> and press <code>Ctrl + space</code> to get all the attributes. Inheritance attributes will also be obtained.",
    "get_aura_components_attributes_tool_paragraph_2": "If the attribute is some SObject, you can get a list of its fields, even concatenate them with other fields in case of relationships. <code>v.sObjectType.field.field.field...</code>. To realize the full potential of this function, it is necessary to update the <a href=\"#refreshMetadataIndex\">Object Index",
    "get_aura_components_attributes_tool_paragraph_3": "It works on both <code> .cmp </code> and <code> .js </code> files and can be activated and deactivated from the extension settings",
    "get_js_controller_functions_tool_paragraph_1": "Aura Helper also provides other code autocomplete tools that allow you to obtain JavaScript driver methods from the components",
    "get_js_controller_functions_tool_paragraph_2": "To make use of this feature, just type <code>c.</code> and press <code>Ctrl + space</code> to get the names of the functions. This also gets inherited functions.",
    "get_js_controller_functions_tool_paragraph_3": "It works on both <code>.cmp</code> and <code>.js</code> files and can be activated and deactivated from the extension settings",
    "get_js_helper_functions_tool_paragraph_1": "As with the controller methods, Aura Helper can obtain the helper methods to facilitate coding.",
    "get_js_helper_functions_tool_paragraph_2": "To make use of this feature, you must only type <code>helper.</code> and press <code>Ctrl + space</code> to get the names of the functions. This also gets inherited functions. For ease of use, it is recommended to identify the helper parameter with the name \"helper\"",
    "get_js_helper_functions_tool_paragraph_3": "It works on both <code>.cmp</code> and <code>.js</code> files and can be activated and deactivated from the extension settings",
    "get_apex_methods_on_js_tool_paragraph_1": "As with the controller or helper methods, Aura Helper also has tools to obtain the Apex controller methods.",
    "get_apex_methods_on_js_tool_paragraph_2": "To do this, just type <code>c.</code> and press <code>Ctrl + space</code> to get the name of the methods. As in the other cases, you also get the inherited functions",
    "get_apex_methods_on_js_tool_paragraph_3": "It works on both <code>.cmp</code> and <code>.js</code> files and can be activated and deactivated from the extension settings",
    "support_on_queries_tool_paragraph_1": "Aura Helper also contains tools to help complete the queries allowing to list the fields of the object to be consulted",
    "support_on_queries_tool_paragraph_2": "Once the minimum structure of a query is written, <code>Select Id from [SObject]</code>, we can obtain the fields indicated in the object after the from by pressing <code>Ctrl + space</code> in the projection clause. This feature works for queries in both lightning components, Javascript files or Apex classes, both for queries between [] and queries between ''",
    "support_on_queries_tool_paragraph_3": "To take full advantage of this feature, you need to update the <a href=\"#refreshMetadataIndex\">Object Index</a>",
    "support_on_queries_tool_paragraph_4": "It works on both <code>.cmp</code> and <code>.js</code> and <code>.cls</code> files and can be activated and deactivated from the extension settings",
    "apex_code_support_tool_paragraph_1": "Finally, how could it be less, Aura Helper also has multiple tools to autocomplete Apex code",
    "apex_code_support_tool_paragraph_2": "From listing all available objects, Standard or Custom, such as the classes created in the application, their fields, methods, etc. <br />It also has support for concatenating calls from different types of data or methods such as <code>className.methodName (). FieldName</code>. All operations are done with the information available in the local project. If you want to work with the latest changes it will be necessary to refresh the project.",
    "apex_code_support_tool_paragraph_3": "Another feature available is the ability to create comments on classes and methods based on a template by typing <code>/**</code>",
    "apex_code_support_tool_paragraph_4": "To take full advantage of this feature, you need to update the <a href=\"#refreshMetadataIndex\">Object Index</a>",
    "apex_code_support_tool_paragraph_5": "It works in <code>.cls</code> files, can be activated and deactivated from the extension configuration and has support for custom and standard classes and objects",
    "documentation_templates_tools_explanation": "Aura Helper has tools to create different elements based on user-defined templates. All templates used by Aura Helper are JSON format <br />Below is the structure of each template",
    "templates_keywords_no_effect": "The rest of <b>Keywords</b> will have no effect on this section of the template",
    "aura_doc_template_tool_paragraph_1": "To facilitate the creation of the Aura component documentation, a template can be defined so that most of the documentation code is generated automatically. This allows you to create documentation faster and easier.",
    "aura_doc_template_tool_paragraph_2": "The template to create the Aura Documentation automatically has the following structure:",
    "aura_doc_template_tool_paragraph_3": "Different <b>Keywords</b> can be used to complete the documentation template.",
    "aura_doc_template_tool_paragraph_4": "Main lines of the body. It is the basic skeleton for the Aura Documentation file. In this section you can use the following <b>Keywords:</b>",
    "aura_doc_template_tool_paragraph_5": "These lines represent the structure of each method in the documentation. When Aura Helper generates the documentation file, it copies the information of each method with the structure defined in this template and then replace the <b>Keywords</b> {! controllerMethods} or {! helperMethods} with the generated content. In this section you can use the following <b>Keywords:</b>",
    "aura_doc_template_tool_paragraph_6": "These lines, finally, represent the structure of each parameter of the methods. As in the \"methodBody\" section, Aura Helper copies the information of each parameter following this template, and replaces the <b>Keyword</b> {! method.params} with the generated content. In this section you can use the following <b>Keywords:</b>",
    "apex_comment_template_tool_paragraph_1": "To facilitate the documentation of the Apex classes, Aura Helper also has a template that can be defined by the user to establish a comment scheme, both for class comments as well as methods.",
    "apex_comment_template_tool_paragraph_2": "The template for creating Apex Comments automatically has the following structure:",
    "apex_comment_template_tool_paragraph_3": "Different <b>Keywords</b> can be used to complete the documentation template.",
    "apex_comment_template_tool_paragraph_4": "Section to create the structure of the comments of the Apex methods:",
    "apex_comment_template_tool_paragraph_5": "Main lines of the comment. Represents the basic skeleton of the Apex comments for the methods. In this section you can use the following <b>Keywords:</b>",
    "apex_comment_template_tool_paragraph_6": "These lines represent the basic scheme for each parameter of the methods in the comment. When generating the comment, Aura Helper copies the information of each parameter of the methods following the defined structure and and replaces the <b> Keyword </b> {! method.params} with the generated content. In this section you can use the following <b>Keywords:</b>",
    "apex_comment_template_tool_paragraph_7": "The lines defined in this section represent the basic structure of the information returned by the method. As with the parameters, Aura Helper copies the corresponding information using the indicated structure and replace the <b> Keyword </b> {! method.return} with the generated content. In this section you can use the following <b>Keywords:</b>",
    "apex_comment_template_tool_paragraph_8": "Section to create the structure of the comments of the Apex classes:",
    "apex_comment_template_tool_paragraph_9": "Main lines of the comment. Represents the basic skeleton of the Apex comments for the methods. In this section you can use the following <b>Keywords:</b>",
    "custom_labels_support_tool_paragraph_1": "Another useful code autocomplete tool is support for custom labels. In order to make use of this feature it is necessary to have the labels downloaded in the local project.",
    "custom_labels_support_tool_paragraph_2": "It works on both Apex, Aura Components and Javascript files. To use this feature, we just have to type <code>Label.</code> and press <code>ctrl + space</code> to get a list of all the labels and select the one we want. Aura Helper will replace the correct value depending on the type of file.",
    "main_data": "Main Data",
    "show": "Show",
    "application_visibilities": "Application Visibilities",
    "category_group_visibilities": "Category Group Visibilities",
    "class_accesses": "Class Accesses",
    "custom_metadata_type_accesses": "Custom Metadata Type Accesses",
    "custom_permissions": "Custom Permissions",
    "custom_setting_accesses": "Custom Setting Accesses",
    "external_data_source_accesses": "External Data Source Accesses",
    "field_permissions": "Field Permissions",
    "field_level_securities": "Field Level Security",
    "flow_accesses": "Flow Accesses",
    "layout_assignments": "Layout Assignments",
    "login_hours": "Login Hours",
    "login_ip_ranges": "Login IP Ranges",
    "object_permissions": "Object Permissions",
    "page_accesses": "Page Accesses",
    "profile_action_overrides": "Profile Action Overrides",
    "record_type_visibilities": "Record Type Visibilities",
    "tab_visibilities": "Tab Visibilities",
    "user_permissions": "User Permissions",
    "show_fields": "Show Fields",
    "show_layouts": "Show Layouts",
    "add_ip_range": "Add IP Range",
    "show_record_types": "Show Record Types",
    "app_name": "App Name",
    "visible": "Visible",
    "default": "Default",
    "class_name": "Class Name",
    "enabled": "Enabled",
    "custom_metadata_name": "Custom Metadata Name",
    "permission_name": "Permission Name",
    "custom_setting_object_name": "Custom Setting Object Name",
    "field_name": "Field Name",
    "readable": "Readable",
    "editable": "Editable",
    "flow_name": "Flow Name",
    "layout_name": "Layout Name",
    "assigned_record_type": "Assigned Record Type",
    "start_address": "Start Address",
    "end_address": "End Address",
    "description": "Description",
    "actions": "Actions",
    "object_name": "Object Name",
    "allow_read": "Allow Read",
    "allow_create": "Allow Create",
    "allow_edit": "Allow Edit",
    "allow_delete": "Allow Delete",
    "view_all_records": "View All Records",
    "modify_all_records": "Modify All Records",
    "page_name": "Page Name",
    "record_Type_name": "Record Type Name",
    "tab_name": "Tab Name",
    "visibility": "Visibility",
    "user_permission_name": "User Permission Name",
    "user_license": "User License",
    "custom": "Custom",
    "permission_set": "Permission Set",
    "profile": "Profile",
    "save": "Save",
    "compress_and_save": "Compress & Save",
    "cancel": "Cancel",
    "all": "All",
    "form_package": "From Package",
    "metadata_types": "Metadata Types",
    "filter_by_name": "Filter by Name",
    "objects": "Objects",
    "items": "Items",
    "load_metadata_from_filesystem": "Load Metadata From File System",
    "load_metadata_from_auth_org": "Load Metadata From Auth Org",
    "overwrite_project_package": "Overwrite Project Package",
    "choose_directory_to_save": "Choose Directory to Save",
    "create_for_retrieve": "Explicit Names",
    "create_for_deploy":"Use Wildcard (*)",
    "delete": "Delete",
    "collapse": "Collapse",
    "hide_fields": "Hide Fields",
    "hide_record_types":"Hide Record Types",
    "hide_layouts": "Hide Layouts",
    "filters": "Filters",
    "filter": "Filter",
    "custom_labels": "Custom Labels",
    "category": "Category",
    "package_generator": "Package Generator",
    "help_title": "Aura Helper's Help",
    "all_categories": "All Categories",
    "value": "Value",
    "language": "Language",
    "name": "Name",
    "no_category": "None",
    "new_language": "New Language",
    "new_category": "New Category",
    "new_custom_label": "New Label",
    "edit": "Edit",
    "name_required": "The Name is Required",
    "value_required": "The Value is Required",
    "laguage_required": "The Language is Required",
    "description_required": "The Description is Required",
    "create_custom_label_error": "Can't create new custom label:",
    "edit_custom_label_error": "Can't edit custom label:",
    "duplicate_label_error": "Can't create two labels with the same name",
    "important": "Important!",
    "custom_label_introduction": "When a label is deleted, it is deleted from both the local file and the organization. On the contrary, when a label is created or edited, it is only included in the file, being necessary to deploy the local labels to upload the created or edited labels",
    "object_manager": "Object Manager",
    "object_manager_introduction": "The object manager is based on the XML files of the objects to work on. If the object's XML file does not exist, even if there are other components such as fields, validations ... they will not be shown in this view",
    "from_git": "From Git",
    "select_from_git_diff": "Select Differences:",
    "from_last_two_commits": "From Last Two Commits",
    "from_specific_commits": "From Specific Two Commits",
    "from_other_brach": "From Other Branch",
    "from_two_branches": "From Specific Two Branches",
    "select": "Select",
    "create_destructive_package": "Destructive Package",
    "first_commit": "First Commit",
    "second_commit": "Second Commit",
    "branch": "Branch",
    "first_branch": "First Branch",
    "second_branch": "Second Branch",
    "select_for_deploy": "Select For Deploy",
    "select_for_delete": "Select For Delete",
    "create_full_package": "Create Full Package",
    "create_package": "Create Package",
    "close": "Close",
    "select_from_git": "Select From GIT",
    "package_generator_introduction_1": "The Package Generator is a tool that increases the possibilities of managing project metadata with very powerful options. You can list all the metadata stored in the local project, or all the metadata of the organization authorized to create a simple, complete or destructive package",
    "package_generator_introduction_2": "Of course, it allows you to manually select the metadata and filter it for a better search, but what makes it especially powerful is the ability to select the metadata based on a <code>package.xml</code> file or, better yet, from the differences between two branches, tags, commits ... of git, allowing a much more detailed version control",
    "package_generator_introduction_3": "The options to create the <code>package.xml</code> file are:",
    "package_generator_introduction_4": "Create to Retrieve or to Deploy. In the first case, all metadata is explicitly included in the package. In the second case, use the * symbol whenever possible. This only applies to simple package creation.",
    "package_generator_introduction_5": "Select to display or to delete.",
    "package_generator_introduction_6": "Overwrite the Project Package or choose a specific folder. This only applies to the creation of simple packages.",
    "package_generator_introduction_7": "The Create Package button generates a single <code>package.xml</code> file. Create Complete Package generates both a <code>package.xml</code> and <code>destructiveChanges.xml</code> file. The last button generates only the <code>destructiveChanges.xml</code> file",
    "first_commit_missing":"Select the First Commit",
    "second_commit_missing":"Select the Second Commit",
    "branch_missing": "Select one Branch",
    "first_branch_missing": "Select the First Branch",
    "second_branch_missing": "Select the Second Branch",
    "wrong_commits_order": "The First Commit must have a previous date than the Second Commit",
    "same_commits_error": "The First and Second Commit can't be the same commit",
    "same_branches_error": "The First and Second Branch can't be the same branch",
    "less_than_two_commits_error": "Can't Select from last two commits because have less than two commits on the repository",
    "git_fetch": "Fetch",
    "not_metadata_selected_for_package_error": "Not Metadata Selected for Create Package. Select at least one element for create the file.",
    "not_metadata_selected_for_destructive_package_error": "Not Metadata Selected for Create Destructive Package. Select at least one element for create the file.",
    "not_metadata_selected_for_full_package_error": "Not Metadata Selected for Create Full Package. Select at least one element for deploy or delete.",
    "package_created_ok": "Package created succesfully",
    "destructive_package_ok": "Destructive Package created succesfully",
    "full_package_ok": "Full Package created succesfully",
    "select_from_package_error": "Wrong file selected. Please, select a correct package.xml file",
    "creating_package_error": "An error ocurren while creating package:",
    "not_metadata_selected_for_delete":"Not Metadata selected for delete. Select at least one element for perform the operation.",
    "metadata_deleted_succesfully": "Metadata Deleted Succesfully",
    "delete_metadata_error": "An error ocurred while deleting metadata:",
    "label_deleted_ok": "Label {0} Deleted Succesfully",
    "label_delete_error": "An error ocurred while deleting Label",
    "label_created_succesfully": "Label {0} Created Succesfully",
    "label_edited_succesfully": "Label {0} Edited Succesfully",
    "label_name_missing_error": "Label Name is Required",
    "label_description_missing_error": "Label Description is Required",
    "label_value_missing_error": "Label Value is Required",
    "user_canceled_operation": "Operation cancelled by the user",
    "accept": "Ok",
    "delete_confirmation_label_title": "Delete Custom Label",
    "delete_confirmation_label_message": "The Custom Label will be removed from the local file and the organization. Are you sure?",
    "download_metadata_options": "Download Metadata Options",
    "select_metadata_for": "Select Metadata For",
    "create_package_options": "Create Package Options",
    "save_package_options": "Save Package On",
    "download_owned_metadata": "Org Namespace",
    "download_all_metadata": "Download All",
    "match_org_introduction": "Below are all the elements that exist in your organization but do not exist in the local project. Only the verification has been done taking into account the types of metadata that are in the local project",
    "day": "Day",
    "start_time": "Start Time",
    "end_time": "End Time",
    "label": "Label",
    "has_activation_required": "Has Activation Required",
    "apex_formatter_settings": "Apex Formatter Settings",
    "apex_formatter_settings_paragraph_1": "All apex format options are grouped as Apex Format, having different groups for configuration.",
    "apex_formatter_settings_class_members": "Class Members: Section to configure the format for the members of the classes and interfaces (separation between methods, fields ...)",
    "apex_formatter_settings_comments": "Comment: Options for formatting comments",
    "apex_formatter_settings_operators": "Operator: This section contains different options to choose how to format the operators.",
    "apex_formatter_settings_punctuation": "Punctuation: Section dedicated to the formatting style of the different punctuation symbols (braces, commas ...)",
    "apex_formatter_settings_queries": "Query: Different configuration options for formatting queries",
    "apex_formatter_settings_format_on_save": "Format on Save: Option to choose if you want to format the code when saving the class or not",
    "metadata_settings": "Metadata Settings",
    "metadata_settings_paragraph_1": "Section to define the API version that Aura Helper will use to connect to Salesforce among other metadata management options. They are grouped under the name of Metadata",
    "GUI_settings": "GUI Settings",
    "GUI_settings_paragraph_1": "Configuration options for the graphical user interface. The group they belong to is Graphic User Interface",
    "code_completion_settings": "Code Completion Settings",
    "code_completion_settings_paragraph_1": "In this section you can enable or disable most of the code autocompletion options that Aura Helper contains. These options are grouped together as Auto Completion Tools",
    "match_metadata_with_local": "Match Org Metadata with Local",
    "delete_order": "Delete Order",
    "after": "After Deploy",
    "before": "Before Deploy"
}