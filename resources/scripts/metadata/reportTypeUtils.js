const Utils = require('./utils');
const AuraParser = require('../languages').AuraParser;

class ReportTypeUtils {

    static createReportType(reportType) {
        let newReportType;
        if (reportType) {
            newReportType = Utils.prepareXML(reportType, ReportTypeUtils.createReportType());
        } else {
            newReportType = {
                autogenerated: undefined,
                baseObject: undefined,
                category: undefined,
                deployed: undefined,
                description: undefined,
                fullName: undefined,
                join: undefined,
                label: undefined,
                sections: []
            };
        }
        return newReportType;
    }

    static createObjectRelationship(join, outerJoin, relationship) {
        return {
            join: join,
            outerJoin: outerJoin,
            relationship: relationship,
        }
    }

    static createReportLayoutSection(columns, masterLabel) {
        return {
            columns: Utils.forceArray(columns),
            masterLabel: masterLabel
        }
    }

    static createReportTypeColumn(checkedByDefault, displayNameOverride, field, table) {
        return {
            checkedByDefault: checkedByDefault,
            displayNameOverride: displayNameOverride,
            field: field,
            table: table
        }
    }

    static toXML(reportType, compress) {
        let xmlLines = [];
        if (reportType) {
            if (compress) {
                xmlLines.push('<?xml version="1.0" encoding="UTF-8"?>');
                xmlLines.push('<ReportType xmlns="http://soap.sforce.com/2006/04/metadata">');
                if (reportType.fullName)
                    xmlLines.push(Utils.getTabs(1) + Utils.getXMLTag('fullName', reportType.fullName));
                if (reportType.label)
                    xmlLines.push(Utils.getTabs(1) + Utils.getXMLTag('label', reportType.label));
                if (reportType.description)
                    xmlLines.push(Utils.getTabs(1) + Utils.getXMLTag('description', reportType.description));
                if (reportType.baseObject)
                    xmlLines.push(Utils.getTabs(1) + Utils.getXMLTag('baseObject', reportType.baseObject));
                if (reportType.autogenerated)
                    xmlLines.push(Utils.getTabs(1) + Utils.getXMLTag('autogenerated', reportType.autogenerated));
                if (reportType.category)
                    xmlLines.push(Utils.getTabs(1) + Utils.getXMLTag('category', reportType.category));
                if (reportType.deployed)
                    xmlLines.push(Utils.getTabs(1) + Utils.getXMLTag('deployed', reportType.deployed));
                if (reportType.join)
                    xmlLines = xmlLines.concat(ReportTypeUtils.getJoinXMLLines(reportType.join, 1));
                if (reportType.sections)
                    xmlLines = xmlLines.concat(ReportTypeUtils.getReportLayoutSectionXMLLines(reportType.sections, 1));
                xmlLines.push('</ReportType>');
            } else {
                return AuraParser.toXML(reportType);
            }
        }
        return xmlLines.join('\n');
    }

    static getJoinXMLLines(join, initIndent) {
        let xmlLines = [];
        xmlLines.push(Utils.getTabs(initIndent) + '<join>');
        if (join.relationship)
            xmlLines.push(Utils.getTabs(1) + Utils.getXMLTag('relationship', join.relationship));
        if (join.outerJoin)
            xmlLines.push(Utils.getTabs(1) + Utils.getXMLTag('outerJoin', join.outerJoin));
        if (join.join)
            xmlLines = xmlLines.concat(ReportTypeUtils.getJoinXMLLines(join.join, initIndent + 1));
        xmlLines.push(Utils.getTabs(initIndent) + '</join>');
        return xmlLines;
    }

    static getReportLayoutSectionXMLLines(sections, initIndent) {
        let xmlLines = [];
        for (const section of sections) {
            xmlLines.push(Utils.getTabs(initIndent) + '<sections>');
            if (section.masterLabel)
                xmlLines.push(Utils.getTabs(initIndent + 1) + Utils.getXMLTag('masterLabel', section.masterLabel));
            if (section.columns)
                xmlLines = xmlLines.concat(Utils.getXMLBlock('columns', section.columns, true, initIndent + 1));
            xmlLines.push(Utils.getTabs(initIndent) + '<sections>');
        }
        return xmlLines;
    }

}
module.exports = ReportTypeUtils;